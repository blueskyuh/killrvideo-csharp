// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uploads/uploads_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace KillrVideo.Uploads {
  public static class UploadsService
  {
    static readonly string __ServiceName = "killrvideo.uploads.UploadsService";

    static readonly Marshaller<global::KillrVideo.Uploads.GetUploadDestinationRequest> __Marshaller_GetUploadDestinationRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.GetUploadDestinationRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Uploads.GetUploadDestinationResponse> __Marshaller_GetUploadDestinationResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.GetUploadDestinationResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Uploads.MarkUploadCompleteRequest> __Marshaller_MarkUploadCompleteRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.MarkUploadCompleteRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Uploads.MarkUploadCompleteResponse> __Marshaller_MarkUploadCompleteResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.MarkUploadCompleteResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Uploads.GetStatusOfVideoRequest> __Marshaller_GetStatusOfVideoRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.GetStatusOfVideoRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Uploads.GetStatusOfVideoResponse> __Marshaller_GetStatusOfVideoResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.GetStatusOfVideoResponse.Parser.ParseFrom);

    static readonly Method<global::KillrVideo.Uploads.GetUploadDestinationRequest, global::KillrVideo.Uploads.GetUploadDestinationResponse> __Method_GetUploadDestination = new Method<global::KillrVideo.Uploads.GetUploadDestinationRequest, global::KillrVideo.Uploads.GetUploadDestinationResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetUploadDestination",
        __Marshaller_GetUploadDestinationRequest,
        __Marshaller_GetUploadDestinationResponse);

    static readonly Method<global::KillrVideo.Uploads.MarkUploadCompleteRequest, global::KillrVideo.Uploads.MarkUploadCompleteResponse> __Method_MarkUploadComplete = new Method<global::KillrVideo.Uploads.MarkUploadCompleteRequest, global::KillrVideo.Uploads.MarkUploadCompleteResponse>(
        MethodType.Unary,
        __ServiceName,
        "MarkUploadComplete",
        __Marshaller_MarkUploadCompleteRequest,
        __Marshaller_MarkUploadCompleteResponse);

    static readonly Method<global::KillrVideo.Uploads.GetStatusOfVideoRequest, global::KillrVideo.Uploads.GetStatusOfVideoResponse> __Method_GetStatusOfVideo = new Method<global::KillrVideo.Uploads.GetStatusOfVideoRequest, global::KillrVideo.Uploads.GetStatusOfVideoResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetStatusOfVideo",
        __Marshaller_GetStatusOfVideoRequest,
        __Marshaller_GetStatusOfVideoResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::KillrVideo.Uploads.UploadsServiceReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface IUploadsServiceClient
    {
      global::KillrVideo.Uploads.GetUploadDestinationResponse GetUploadDestination(global::KillrVideo.Uploads.GetUploadDestinationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.Uploads.GetUploadDestinationResponse GetUploadDestination(global::KillrVideo.Uploads.GetUploadDestinationRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.Uploads.GetUploadDestinationResponse> GetUploadDestinationAsync(global::KillrVideo.Uploads.GetUploadDestinationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.Uploads.GetUploadDestinationResponse> GetUploadDestinationAsync(global::KillrVideo.Uploads.GetUploadDestinationRequest request, CallOptions options);
      global::KillrVideo.Uploads.MarkUploadCompleteResponse MarkUploadComplete(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.Uploads.MarkUploadCompleteResponse MarkUploadComplete(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.Uploads.MarkUploadCompleteResponse> MarkUploadCompleteAsync(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.Uploads.MarkUploadCompleteResponse> MarkUploadCompleteAsync(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, CallOptions options);
      global::KillrVideo.Uploads.GetStatusOfVideoResponse GetStatusOfVideo(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.Uploads.GetStatusOfVideoResponse GetStatusOfVideo(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.Uploads.GetStatusOfVideoResponse> GetStatusOfVideoAsync(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.Uploads.GetStatusOfVideoResponse> GetStatusOfVideoAsync(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, CallOptions options);
    }

    // server-side interface
    public interface IUploadsService
    {
      Task<global::KillrVideo.Uploads.GetUploadDestinationResponse> GetUploadDestination(global::KillrVideo.Uploads.GetUploadDestinationRequest request, ServerCallContext context);
      Task<global::KillrVideo.Uploads.MarkUploadCompleteResponse> MarkUploadComplete(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, ServerCallContext context);
      Task<global::KillrVideo.Uploads.GetStatusOfVideoResponse> GetStatusOfVideo(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, ServerCallContext context);
    }

    // client stub
    public class UploadsServiceClient : ClientBase, IUploadsServiceClient
    {
      public UploadsServiceClient(Channel channel) : base(channel)
      {
      }
      public global::KillrVideo.Uploads.GetUploadDestinationResponse GetUploadDestination(global::KillrVideo.Uploads.GetUploadDestinationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetUploadDestination, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.Uploads.GetUploadDestinationResponse GetUploadDestination(global::KillrVideo.Uploads.GetUploadDestinationRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetUploadDestination, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Uploads.GetUploadDestinationResponse> GetUploadDestinationAsync(global::KillrVideo.Uploads.GetUploadDestinationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetUploadDestination, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Uploads.GetUploadDestinationResponse> GetUploadDestinationAsync(global::KillrVideo.Uploads.GetUploadDestinationRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetUploadDestination, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::KillrVideo.Uploads.MarkUploadCompleteResponse MarkUploadComplete(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_MarkUploadComplete, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.Uploads.MarkUploadCompleteResponse MarkUploadComplete(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_MarkUploadComplete, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Uploads.MarkUploadCompleteResponse> MarkUploadCompleteAsync(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_MarkUploadComplete, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Uploads.MarkUploadCompleteResponse> MarkUploadCompleteAsync(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_MarkUploadComplete, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::KillrVideo.Uploads.GetStatusOfVideoResponse GetStatusOfVideo(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetStatusOfVideo, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.Uploads.GetStatusOfVideoResponse GetStatusOfVideo(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetStatusOfVideo, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Uploads.GetStatusOfVideoResponse> GetStatusOfVideoAsync(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetStatusOfVideo, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Uploads.GetStatusOfVideoResponse> GetStatusOfVideoAsync(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetStatusOfVideo, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IUploadsService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_GetUploadDestination, serviceImpl.GetUploadDestination)
          .AddMethod(__Method_MarkUploadComplete, serviceImpl.MarkUploadComplete)
          .AddMethod(__Method_GetStatusOfVideo, serviceImpl.GetStatusOfVideo).Build();
    }

    // creates a new client
    public static UploadsServiceClient NewClient(Channel channel)
    {
      return new UploadsServiceClient(channel);
    }

  }
}
#endregion
