// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comments/comments_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace KillrVideo.Comments {
  public static class CommentsService
  {
    static readonly string __ServiceName = "killrvideo.comments.CommentsService";

    static readonly Marshaller<global::KillrVideo.Comments.CommentOnVideoRequest> __Marshaller_CommentOnVideoRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.CommentOnVideoRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Comments.CommentOnVideoResponse> __Marshaller_CommentOnVideoResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.CommentOnVideoResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Comments.GetUserCommentsRequest> __Marshaller_GetUserCommentsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.GetUserCommentsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Comments.GetUserCommentsResponse> __Marshaller_GetUserCommentsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.GetUserCommentsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Comments.GetVideoCommentsRequest> __Marshaller_GetVideoCommentsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.GetVideoCommentsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Comments.GetVideoCommentsResponse> __Marshaller_GetVideoCommentsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.GetVideoCommentsResponse.Parser.ParseFrom);

    static readonly Method<global::KillrVideo.Comments.CommentOnVideoRequest, global::KillrVideo.Comments.CommentOnVideoResponse> __Method_CommentOnVideo = new Method<global::KillrVideo.Comments.CommentOnVideoRequest, global::KillrVideo.Comments.CommentOnVideoResponse>(
        MethodType.Unary,
        __ServiceName,
        "CommentOnVideo",
        __Marshaller_CommentOnVideoRequest,
        __Marshaller_CommentOnVideoResponse);

    static readonly Method<global::KillrVideo.Comments.GetUserCommentsRequest, global::KillrVideo.Comments.GetUserCommentsResponse> __Method_GetUserComments = new Method<global::KillrVideo.Comments.GetUserCommentsRequest, global::KillrVideo.Comments.GetUserCommentsResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetUserComments",
        __Marshaller_GetUserCommentsRequest,
        __Marshaller_GetUserCommentsResponse);

    static readonly Method<global::KillrVideo.Comments.GetVideoCommentsRequest, global::KillrVideo.Comments.GetVideoCommentsResponse> __Method_GetVideoComments = new Method<global::KillrVideo.Comments.GetVideoCommentsRequest, global::KillrVideo.Comments.GetVideoCommentsResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetVideoComments",
        __Marshaller_GetVideoCommentsRequest,
        __Marshaller_GetVideoCommentsResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::KillrVideo.Comments.CommentsServiceReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface ICommentsServiceClient
    {
      global::KillrVideo.Comments.CommentOnVideoResponse CommentOnVideo(global::KillrVideo.Comments.CommentOnVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.Comments.CommentOnVideoResponse CommentOnVideo(global::KillrVideo.Comments.CommentOnVideoRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.Comments.CommentOnVideoResponse> CommentOnVideoAsync(global::KillrVideo.Comments.CommentOnVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.Comments.CommentOnVideoResponse> CommentOnVideoAsync(global::KillrVideo.Comments.CommentOnVideoRequest request, CallOptions options);
      global::KillrVideo.Comments.GetUserCommentsResponse GetUserComments(global::KillrVideo.Comments.GetUserCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.Comments.GetUserCommentsResponse GetUserComments(global::KillrVideo.Comments.GetUserCommentsRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.Comments.GetUserCommentsResponse> GetUserCommentsAsync(global::KillrVideo.Comments.GetUserCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.Comments.GetUserCommentsResponse> GetUserCommentsAsync(global::KillrVideo.Comments.GetUserCommentsRequest request, CallOptions options);
      global::KillrVideo.Comments.GetVideoCommentsResponse GetVideoComments(global::KillrVideo.Comments.GetVideoCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.Comments.GetVideoCommentsResponse GetVideoComments(global::KillrVideo.Comments.GetVideoCommentsRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.Comments.GetVideoCommentsResponse> GetVideoCommentsAsync(global::KillrVideo.Comments.GetVideoCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.Comments.GetVideoCommentsResponse> GetVideoCommentsAsync(global::KillrVideo.Comments.GetVideoCommentsRequest request, CallOptions options);
    }

    // server-side interface
    public interface ICommentsService
    {
      Task<global::KillrVideo.Comments.CommentOnVideoResponse> CommentOnVideo(global::KillrVideo.Comments.CommentOnVideoRequest request, ServerCallContext context);
      Task<global::KillrVideo.Comments.GetUserCommentsResponse> GetUserComments(global::KillrVideo.Comments.GetUserCommentsRequest request, ServerCallContext context);
      Task<global::KillrVideo.Comments.GetVideoCommentsResponse> GetVideoComments(global::KillrVideo.Comments.GetVideoCommentsRequest request, ServerCallContext context);
    }

    // client stub
    public class CommentsServiceClient : ClientBase, ICommentsServiceClient
    {
      public CommentsServiceClient(Channel channel) : base(channel)
      {
      }
      public global::KillrVideo.Comments.CommentOnVideoResponse CommentOnVideo(global::KillrVideo.Comments.CommentOnVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CommentOnVideo, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.Comments.CommentOnVideoResponse CommentOnVideo(global::KillrVideo.Comments.CommentOnVideoRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CommentOnVideo, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Comments.CommentOnVideoResponse> CommentOnVideoAsync(global::KillrVideo.Comments.CommentOnVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CommentOnVideo, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Comments.CommentOnVideoResponse> CommentOnVideoAsync(global::KillrVideo.Comments.CommentOnVideoRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CommentOnVideo, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::KillrVideo.Comments.GetUserCommentsResponse GetUserComments(global::KillrVideo.Comments.GetUserCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetUserComments, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.Comments.GetUserCommentsResponse GetUserComments(global::KillrVideo.Comments.GetUserCommentsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetUserComments, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Comments.GetUserCommentsResponse> GetUserCommentsAsync(global::KillrVideo.Comments.GetUserCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetUserComments, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Comments.GetUserCommentsResponse> GetUserCommentsAsync(global::KillrVideo.Comments.GetUserCommentsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetUserComments, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::KillrVideo.Comments.GetVideoCommentsResponse GetVideoComments(global::KillrVideo.Comments.GetVideoCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetVideoComments, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.Comments.GetVideoCommentsResponse GetVideoComments(global::KillrVideo.Comments.GetVideoCommentsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetVideoComments, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Comments.GetVideoCommentsResponse> GetVideoCommentsAsync(global::KillrVideo.Comments.GetVideoCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetVideoComments, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Comments.GetVideoCommentsResponse> GetVideoCommentsAsync(global::KillrVideo.Comments.GetVideoCommentsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetVideoComments, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(ICommentsService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_CommentOnVideo, serviceImpl.CommentOnVideo)
          .AddMethod(__Method_GetUserComments, serviceImpl.GetUserComments)
          .AddMethod(__Method_GetVideoComments, serviceImpl.GetVideoComments).Build();
    }

    // creates a new client
    public static CommentsServiceClient NewClient(Channel channel)
    {
      return new CommentsServiceClient(channel);
    }

  }
}
#endregion
