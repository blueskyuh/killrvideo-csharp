// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample-data/sample_data_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace KillrVideo.SampleData {

  /// <summary>Holder for reflection information generated from sample-data/sample_data_service.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class SampleDataServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for sample-data/sample_data_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SampleDataServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVzYW1wbGUtZGF0YS9zYW1wbGVfZGF0YV9zZXJ2aWNlLnByb3RvEhZraWxs",
            "cnZpZGVvLnNhbXBsZV9kYXRhIjYKGEFkZFNhbXBsZUNvbW1lbnRzUmVxdWVz",
            "dBIaChJudW1iZXJfb2ZfY29tbWVudHMYASABKAUiGwoZQWRkU2FtcGxlQ29t",
            "bWVudHNSZXNwb25zZSI0ChdBZGRTYW1wbGVSYXRpbmdzUmVxdWVzdBIZChFu",
            "dW1iZXJfb2ZfcmF0aW5ncxgBIAEoBSIaChhBZGRTYW1wbGVSYXRpbmdzUmVz",
            "cG9uc2UiMAoVQWRkU2FtcGxlVXNlcnNSZXF1ZXN0EhcKD251bWJlcl9vZl91",
            "c2VycxgBIAEoBSIYChZBZGRTYW1wbGVVc2Vyc1Jlc3BvbnNlIjUKGkFkZFNh",
            "bXBsZVZpZGVvVmlld3NSZXF1ZXN0EhcKD251bWJlcl9vZl92aWV3cxgBIAEo",
            "BSIdChtBZGRTYW1wbGVWaWRlb1ZpZXdzUmVzcG9uc2UiOQodQWRkU2FtcGxl",
            "WW91VHViZVZpZGVvc1JlcXVlc3QSGAoQbnVtYmVyX29mX3ZpZGVvcxgBIAEo",
            "BSIgCh5BZGRTYW1wbGVZb3VUdWJlVmlkZW9zUmVzcG9uc2UiHgocUmVmcmVz",
            "aFlvdVR1YmVTb3VyY2VzUmVxdWVzdCIfCh1SZWZyZXNoWW91VHViZVNvdXJj",
            "ZXNSZXNwb25zZTKGBgoRU2FtcGxlRGF0YVNlcnZpY2USeAoRQWRkU2FtcGxl",
            "Q29tbWVudHMSMC5raWxscnZpZGVvLnNhbXBsZV9kYXRhLkFkZFNhbXBsZUNv",
            "bW1lbnRzUmVxdWVzdBoxLmtpbGxydmlkZW8uc2FtcGxlX2RhdGEuQWRkU2Ft",
            "cGxlQ29tbWVudHNSZXNwb25zZRJ1ChBBZGRTYW1wbGVSYXRpbmdzEi8ua2ls",
            "bHJ2aWRlby5zYW1wbGVfZGF0YS5BZGRTYW1wbGVSYXRpbmdzUmVxdWVzdBow",
            "LmtpbGxydmlkZW8uc2FtcGxlX2RhdGEuQWRkU2FtcGxlUmF0aW5nc1Jlc3Bv",
            "bnNlEm8KDkFkZFNhbXBsZVVzZXJzEi0ua2lsbHJ2aWRlby5zYW1wbGVfZGF0",
            "YS5BZGRTYW1wbGVVc2Vyc1JlcXVlc3QaLi5raWxscnZpZGVvLnNhbXBsZV9k",
            "YXRhLkFkZFNhbXBsZVVzZXJzUmVzcG9uc2USfgoTQWRkU2FtcGxlVmlkZW9W",
            "aWV3cxIyLmtpbGxydmlkZW8uc2FtcGxlX2RhdGEuQWRkU2FtcGxlVmlkZW9W",
            "aWV3c1JlcXVlc3QaMy5raWxscnZpZGVvLnNhbXBsZV9kYXRhLkFkZFNhbXBs",
            "ZVZpZGVvVmlld3NSZXNwb25zZRKHAQoWQWRkU2FtcGxlWW91VHViZVZpZGVv",
            "cxI1LmtpbGxydmlkZW8uc2FtcGxlX2RhdGEuQWRkU2FtcGxlWW91VHViZVZp",
            "ZGVvc1JlcXVlc3QaNi5raWxscnZpZGVvLnNhbXBsZV9kYXRhLkFkZFNhbXBs",
            "ZVlvdVR1YmVWaWRlb3NSZXNwb25zZRKEAQoVUmVmcmVzaFlvdVR1YmVTb3Vy",
            "Y2VzEjQua2lsbHJ2aWRlby5zYW1wbGVfZGF0YS5SZWZyZXNoWW91VHViZVNv",
            "dXJjZXNSZXF1ZXN0GjUua2lsbHJ2aWRlby5zYW1wbGVfZGF0YS5SZWZyZXNo",
            "WW91VHViZVNvdXJjZXNSZXNwb25zZUIYqgIVS2lsbHJWaWRlby5TYW1wbGVE",
            "YXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.AddSampleCommentsRequest), global::KillrVideo.SampleData.AddSampleCommentsRequest.Parser, new[]{ "NumberOfComments" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.AddSampleCommentsResponse), global::KillrVideo.SampleData.AddSampleCommentsResponse.Parser, null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.AddSampleRatingsRequest), global::KillrVideo.SampleData.AddSampleRatingsRequest.Parser, new[]{ "NumberOfRatings" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.AddSampleRatingsResponse), global::KillrVideo.SampleData.AddSampleRatingsResponse.Parser, null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.AddSampleUsersRequest), global::KillrVideo.SampleData.AddSampleUsersRequest.Parser, new[]{ "NumberOfUsers" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.AddSampleUsersResponse), global::KillrVideo.SampleData.AddSampleUsersResponse.Parser, null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.AddSampleVideoViewsRequest), global::KillrVideo.SampleData.AddSampleVideoViewsRequest.Parser, new[]{ "NumberOfViews" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.AddSampleVideoViewsResponse), global::KillrVideo.SampleData.AddSampleVideoViewsResponse.Parser, null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest), global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest.Parser, new[]{ "NumberOfVideos" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse), global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse.Parser, null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest), global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest.Parser, null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse), global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Request for adding sample comments
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddSampleCommentsRequest : pb::IMessage<AddSampleCommentsRequest> {
    private static readonly pb::MessageParser<AddSampleCommentsRequest> _parser = new pb::MessageParser<AddSampleCommentsRequest>(() => new AddSampleCommentsRequest());
    public static pb::MessageParser<AddSampleCommentsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AddSampleCommentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AddSampleCommentsRequest(AddSampleCommentsRequest other) : this() {
      numberOfComments_ = other.numberOfComments_;
    }

    public AddSampleCommentsRequest Clone() {
      return new AddSampleCommentsRequest(this);
    }

    /// <summary>Field number for the "number_of_comments" field.</summary>
    public const int NumberOfCommentsFieldNumber = 1;
    private int numberOfComments_;
    public int NumberOfComments {
      get { return numberOfComments_; }
      set {
        numberOfComments_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AddSampleCommentsRequest);
    }

    public bool Equals(AddSampleCommentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfComments != other.NumberOfComments) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfComments != 0) hash ^= NumberOfComments.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfComments != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumberOfComments);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NumberOfComments != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfComments);
      }
      return size;
    }

    public void MergeFrom(AddSampleCommentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfComments != 0) {
        NumberOfComments = other.NumberOfComments;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumberOfComments = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response for adding sample comments
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddSampleCommentsResponse : pb::IMessage<AddSampleCommentsResponse> {
    private static readonly pb::MessageParser<AddSampleCommentsResponse> _parser = new pb::MessageParser<AddSampleCommentsResponse>(() => new AddSampleCommentsResponse());
    public static pb::MessageParser<AddSampleCommentsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AddSampleCommentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AddSampleCommentsResponse(AddSampleCommentsResponse other) : this() {
    }

    public AddSampleCommentsResponse Clone() {
      return new AddSampleCommentsResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as AddSampleCommentsResponse);
    }

    public bool Equals(AddSampleCommentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(AddSampleCommentsResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  Request for adding sample ratings
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddSampleRatingsRequest : pb::IMessage<AddSampleRatingsRequest> {
    private static readonly pb::MessageParser<AddSampleRatingsRequest> _parser = new pb::MessageParser<AddSampleRatingsRequest>(() => new AddSampleRatingsRequest());
    public static pb::MessageParser<AddSampleRatingsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AddSampleRatingsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AddSampleRatingsRequest(AddSampleRatingsRequest other) : this() {
      numberOfRatings_ = other.numberOfRatings_;
    }

    public AddSampleRatingsRequest Clone() {
      return new AddSampleRatingsRequest(this);
    }

    /// <summary>Field number for the "number_of_ratings" field.</summary>
    public const int NumberOfRatingsFieldNumber = 1;
    private int numberOfRatings_;
    public int NumberOfRatings {
      get { return numberOfRatings_; }
      set {
        numberOfRatings_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AddSampleRatingsRequest);
    }

    public bool Equals(AddSampleRatingsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfRatings != other.NumberOfRatings) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfRatings != 0) hash ^= NumberOfRatings.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfRatings != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumberOfRatings);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NumberOfRatings != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfRatings);
      }
      return size;
    }

    public void MergeFrom(AddSampleRatingsRequest other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfRatings != 0) {
        NumberOfRatings = other.NumberOfRatings;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumberOfRatings = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when adding sample ratings
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddSampleRatingsResponse : pb::IMessage<AddSampleRatingsResponse> {
    private static readonly pb::MessageParser<AddSampleRatingsResponse> _parser = new pb::MessageParser<AddSampleRatingsResponse>(() => new AddSampleRatingsResponse());
    public static pb::MessageParser<AddSampleRatingsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AddSampleRatingsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AddSampleRatingsResponse(AddSampleRatingsResponse other) : this() {
    }

    public AddSampleRatingsResponse Clone() {
      return new AddSampleRatingsResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as AddSampleRatingsResponse);
    }

    public bool Equals(AddSampleRatingsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(AddSampleRatingsResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  Request for adding sample users
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddSampleUsersRequest : pb::IMessage<AddSampleUsersRequest> {
    private static readonly pb::MessageParser<AddSampleUsersRequest> _parser = new pb::MessageParser<AddSampleUsersRequest>(() => new AddSampleUsersRequest());
    public static pb::MessageParser<AddSampleUsersRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AddSampleUsersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AddSampleUsersRequest(AddSampleUsersRequest other) : this() {
      numberOfUsers_ = other.numberOfUsers_;
    }

    public AddSampleUsersRequest Clone() {
      return new AddSampleUsersRequest(this);
    }

    /// <summary>Field number for the "number_of_users" field.</summary>
    public const int NumberOfUsersFieldNumber = 1;
    private int numberOfUsers_;
    public int NumberOfUsers {
      get { return numberOfUsers_; }
      set {
        numberOfUsers_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AddSampleUsersRequest);
    }

    public bool Equals(AddSampleUsersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfUsers != other.NumberOfUsers) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfUsers != 0) hash ^= NumberOfUsers.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfUsers != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumberOfUsers);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NumberOfUsers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfUsers);
      }
      return size;
    }

    public void MergeFrom(AddSampleUsersRequest other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfUsers != 0) {
        NumberOfUsers = other.NumberOfUsers;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumberOfUsers = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when adding sample users
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddSampleUsersResponse : pb::IMessage<AddSampleUsersResponse> {
    private static readonly pb::MessageParser<AddSampleUsersResponse> _parser = new pb::MessageParser<AddSampleUsersResponse>(() => new AddSampleUsersResponse());
    public static pb::MessageParser<AddSampleUsersResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AddSampleUsersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AddSampleUsersResponse(AddSampleUsersResponse other) : this() {
    }

    public AddSampleUsersResponse Clone() {
      return new AddSampleUsersResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as AddSampleUsersResponse);
    }

    public bool Equals(AddSampleUsersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(AddSampleUsersResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  Request to add sample video views
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddSampleVideoViewsRequest : pb::IMessage<AddSampleVideoViewsRequest> {
    private static readonly pb::MessageParser<AddSampleVideoViewsRequest> _parser = new pb::MessageParser<AddSampleVideoViewsRequest>(() => new AddSampleVideoViewsRequest());
    public static pb::MessageParser<AddSampleVideoViewsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AddSampleVideoViewsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AddSampleVideoViewsRequest(AddSampleVideoViewsRequest other) : this() {
      numberOfViews_ = other.numberOfViews_;
    }

    public AddSampleVideoViewsRequest Clone() {
      return new AddSampleVideoViewsRequest(this);
    }

    /// <summary>Field number for the "number_of_views" field.</summary>
    public const int NumberOfViewsFieldNumber = 1;
    private int numberOfViews_;
    public int NumberOfViews {
      get { return numberOfViews_; }
      set {
        numberOfViews_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AddSampleVideoViewsRequest);
    }

    public bool Equals(AddSampleVideoViewsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfViews != other.NumberOfViews) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfViews != 0) hash ^= NumberOfViews.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfViews != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumberOfViews);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NumberOfViews != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfViews);
      }
      return size;
    }

    public void MergeFrom(AddSampleVideoViewsRequest other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfViews != 0) {
        NumberOfViews = other.NumberOfViews;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumberOfViews = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when adding sample video views
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddSampleVideoViewsResponse : pb::IMessage<AddSampleVideoViewsResponse> {
    private static readonly pb::MessageParser<AddSampleVideoViewsResponse> _parser = new pb::MessageParser<AddSampleVideoViewsResponse>(() => new AddSampleVideoViewsResponse());
    public static pb::MessageParser<AddSampleVideoViewsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AddSampleVideoViewsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AddSampleVideoViewsResponse(AddSampleVideoViewsResponse other) : this() {
    }

    public AddSampleVideoViewsResponse Clone() {
      return new AddSampleVideoViewsResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as AddSampleVideoViewsResponse);
    }

    public bool Equals(AddSampleVideoViewsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(AddSampleVideoViewsResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  Request to add sample YouTube videos
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddSampleYouTubeVideosRequest : pb::IMessage<AddSampleYouTubeVideosRequest> {
    private static readonly pb::MessageParser<AddSampleYouTubeVideosRequest> _parser = new pb::MessageParser<AddSampleYouTubeVideosRequest>(() => new AddSampleYouTubeVideosRequest());
    public static pb::MessageParser<AddSampleYouTubeVideosRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AddSampleYouTubeVideosRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AddSampleYouTubeVideosRequest(AddSampleYouTubeVideosRequest other) : this() {
      numberOfVideos_ = other.numberOfVideos_;
    }

    public AddSampleYouTubeVideosRequest Clone() {
      return new AddSampleYouTubeVideosRequest(this);
    }

    /// <summary>Field number for the "number_of_videos" field.</summary>
    public const int NumberOfVideosFieldNumber = 1;
    private int numberOfVideos_;
    public int NumberOfVideos {
      get { return numberOfVideos_; }
      set {
        numberOfVideos_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AddSampleYouTubeVideosRequest);
    }

    public bool Equals(AddSampleYouTubeVideosRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfVideos != other.NumberOfVideos) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfVideos != 0) hash ^= NumberOfVideos.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfVideos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumberOfVideos);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NumberOfVideos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfVideos);
      }
      return size;
    }

    public void MergeFrom(AddSampleYouTubeVideosRequest other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfVideos != 0) {
        NumberOfVideos = other.NumberOfVideos;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumberOfVideos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when adding sample YouTube videos
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddSampleYouTubeVideosResponse : pb::IMessage<AddSampleYouTubeVideosResponse> {
    private static readonly pb::MessageParser<AddSampleYouTubeVideosResponse> _parser = new pb::MessageParser<AddSampleYouTubeVideosResponse>(() => new AddSampleYouTubeVideosResponse());
    public static pb::MessageParser<AddSampleYouTubeVideosResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AddSampleYouTubeVideosResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AddSampleYouTubeVideosResponse(AddSampleYouTubeVideosResponse other) : this() {
    }

    public AddSampleYouTubeVideosResponse Clone() {
      return new AddSampleYouTubeVideosResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as AddSampleYouTubeVideosResponse);
    }

    public bool Equals(AddSampleYouTubeVideosResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(AddSampleYouTubeVideosResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  Request to refresh the list of videos from YouTube video sources
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RefreshYouTubeSourcesRequest : pb::IMessage<RefreshYouTubeSourcesRequest> {
    private static readonly pb::MessageParser<RefreshYouTubeSourcesRequest> _parser = new pb::MessageParser<RefreshYouTubeSourcesRequest>(() => new RefreshYouTubeSourcesRequest());
    public static pb::MessageParser<RefreshYouTubeSourcesRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RefreshYouTubeSourcesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RefreshYouTubeSourcesRequest(RefreshYouTubeSourcesRequest other) : this() {
    }

    public RefreshYouTubeSourcesRequest Clone() {
      return new RefreshYouTubeSourcesRequest(this);
    }

    public override bool Equals(object other) {
      return Equals(other as RefreshYouTubeSourcesRequest);
    }

    public bool Equals(RefreshYouTubeSourcesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(RefreshYouTubeSourcesRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  Response when refreshing the list of videos from YouTube
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RefreshYouTubeSourcesResponse : pb::IMessage<RefreshYouTubeSourcesResponse> {
    private static readonly pb::MessageParser<RefreshYouTubeSourcesResponse> _parser = new pb::MessageParser<RefreshYouTubeSourcesResponse>(() => new RefreshYouTubeSourcesResponse());
    public static pb::MessageParser<RefreshYouTubeSourcesResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RefreshYouTubeSourcesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RefreshYouTubeSourcesResponse(RefreshYouTubeSourcesResponse other) : this() {
    }

    public RefreshYouTubeSourcesResponse Clone() {
      return new RefreshYouTubeSourcesResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as RefreshYouTubeSourcesResponse);
    }

    public bool Equals(RefreshYouTubeSourcesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(RefreshYouTubeSourcesResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
