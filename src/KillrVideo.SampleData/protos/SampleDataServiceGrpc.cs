// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample-data/sample_data_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace KillrVideo.SampleData {
  /// <summary>
  ///  Service for managing sample data on the site
  /// </summary>
  public static class SampleDataService
  {
    static readonly string __ServiceName = "killrvideo.sample_data.SampleDataService";

    static readonly Marshaller<global::KillrVideo.SampleData.AddSampleCommentsRequest> __Marshaller_AddSampleCommentsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.AddSampleCommentsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.AddSampleCommentsResponse> __Marshaller_AddSampleCommentsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.AddSampleCommentsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.AddSampleRatingsRequest> __Marshaller_AddSampleRatingsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.AddSampleRatingsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.AddSampleRatingsResponse> __Marshaller_AddSampleRatingsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.AddSampleRatingsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.AddSampleUsersRequest> __Marshaller_AddSampleUsersRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.AddSampleUsersRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.AddSampleUsersResponse> __Marshaller_AddSampleUsersResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.AddSampleUsersResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.AddSampleVideoViewsRequest> __Marshaller_AddSampleVideoViewsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.AddSampleVideoViewsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.AddSampleVideoViewsResponse> __Marshaller_AddSampleVideoViewsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.AddSampleVideoViewsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest> __Marshaller_AddSampleYouTubeVideosRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse> __Marshaller_AddSampleYouTubeVideosResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest> __Marshaller_RefreshYouTubeSourcesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse> __Marshaller_RefreshYouTubeSourcesResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse.Parser.ParseFrom);

    static readonly Method<global::KillrVideo.SampleData.AddSampleCommentsRequest, global::KillrVideo.SampleData.AddSampleCommentsResponse> __Method_AddSampleComments = new Method<global::KillrVideo.SampleData.AddSampleCommentsRequest, global::KillrVideo.SampleData.AddSampleCommentsResponse>(
        MethodType.Unary,
        __ServiceName,
        "AddSampleComments",
        __Marshaller_AddSampleCommentsRequest,
        __Marshaller_AddSampleCommentsResponse);

    static readonly Method<global::KillrVideo.SampleData.AddSampleRatingsRequest, global::KillrVideo.SampleData.AddSampleRatingsResponse> __Method_AddSampleRatings = new Method<global::KillrVideo.SampleData.AddSampleRatingsRequest, global::KillrVideo.SampleData.AddSampleRatingsResponse>(
        MethodType.Unary,
        __ServiceName,
        "AddSampleRatings",
        __Marshaller_AddSampleRatingsRequest,
        __Marshaller_AddSampleRatingsResponse);

    static readonly Method<global::KillrVideo.SampleData.AddSampleUsersRequest, global::KillrVideo.SampleData.AddSampleUsersResponse> __Method_AddSampleUsers = new Method<global::KillrVideo.SampleData.AddSampleUsersRequest, global::KillrVideo.SampleData.AddSampleUsersResponse>(
        MethodType.Unary,
        __ServiceName,
        "AddSampleUsers",
        __Marshaller_AddSampleUsersRequest,
        __Marshaller_AddSampleUsersResponse);

    static readonly Method<global::KillrVideo.SampleData.AddSampleVideoViewsRequest, global::KillrVideo.SampleData.AddSampleVideoViewsResponse> __Method_AddSampleVideoViews = new Method<global::KillrVideo.SampleData.AddSampleVideoViewsRequest, global::KillrVideo.SampleData.AddSampleVideoViewsResponse>(
        MethodType.Unary,
        __ServiceName,
        "AddSampleVideoViews",
        __Marshaller_AddSampleVideoViewsRequest,
        __Marshaller_AddSampleVideoViewsResponse);

    static readonly Method<global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest, global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse> __Method_AddSampleYouTubeVideos = new Method<global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest, global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse>(
        MethodType.Unary,
        __ServiceName,
        "AddSampleYouTubeVideos",
        __Marshaller_AddSampleYouTubeVideosRequest,
        __Marshaller_AddSampleYouTubeVideosResponse);

    static readonly Method<global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest, global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse> __Method_RefreshYouTubeSources = new Method<global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest, global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse>(
        MethodType.Unary,
        __ServiceName,
        "RefreshYouTubeSources",
        __Marshaller_RefreshYouTubeSourcesRequest,
        __Marshaller_RefreshYouTubeSourcesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::KillrVideo.SampleData.SampleDataServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for SampleDataService</summary>
    [System.Obsolete("Client side interfaced will be removed in the next release. Use client class directly.")]
    public interface ISampleDataServiceClient
    {
      /// <summary>
      ///  Adds sample comment data
      /// </summary>
      global::KillrVideo.SampleData.AddSampleCommentsResponse AddSampleComments(global::KillrVideo.SampleData.AddSampleCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Adds sample comment data
      /// </summary>
      global::KillrVideo.SampleData.AddSampleCommentsResponse AddSampleComments(global::KillrVideo.SampleData.AddSampleCommentsRequest request, CallOptions options);
      /// <summary>
      ///  Adds sample comment data
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleCommentsResponse> AddSampleCommentsAsync(global::KillrVideo.SampleData.AddSampleCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Adds sample comment data
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleCommentsResponse> AddSampleCommentsAsync(global::KillrVideo.SampleData.AddSampleCommentsRequest request, CallOptions options);
      /// <summary>
      ///  Adds sample ratings data
      /// </summary>
      global::KillrVideo.SampleData.AddSampleRatingsResponse AddSampleRatings(global::KillrVideo.SampleData.AddSampleRatingsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Adds sample ratings data
      /// </summary>
      global::KillrVideo.SampleData.AddSampleRatingsResponse AddSampleRatings(global::KillrVideo.SampleData.AddSampleRatingsRequest request, CallOptions options);
      /// <summary>
      ///  Adds sample ratings data
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleRatingsResponse> AddSampleRatingsAsync(global::KillrVideo.SampleData.AddSampleRatingsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Adds sample ratings data
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleRatingsResponse> AddSampleRatingsAsync(global::KillrVideo.SampleData.AddSampleRatingsRequest request, CallOptions options);
      /// <summary>
      ///  Adds sample users data
      /// </summary>
      global::KillrVideo.SampleData.AddSampleUsersResponse AddSampleUsers(global::KillrVideo.SampleData.AddSampleUsersRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Adds sample users data
      /// </summary>
      global::KillrVideo.SampleData.AddSampleUsersResponse AddSampleUsers(global::KillrVideo.SampleData.AddSampleUsersRequest request, CallOptions options);
      /// <summary>
      ///  Adds sample users data
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleUsersResponse> AddSampleUsersAsync(global::KillrVideo.SampleData.AddSampleUsersRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Adds sample users data
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleUsersResponse> AddSampleUsersAsync(global::KillrVideo.SampleData.AddSampleUsersRequest request, CallOptions options);
      /// <summary>
      ///  Adds sample video views data
      /// </summary>
      global::KillrVideo.SampleData.AddSampleVideoViewsResponse AddSampleVideoViews(global::KillrVideo.SampleData.AddSampleVideoViewsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Adds sample video views data
      /// </summary>
      global::KillrVideo.SampleData.AddSampleVideoViewsResponse AddSampleVideoViews(global::KillrVideo.SampleData.AddSampleVideoViewsRequest request, CallOptions options);
      /// <summary>
      ///  Adds sample video views data
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleVideoViewsResponse> AddSampleVideoViewsAsync(global::KillrVideo.SampleData.AddSampleVideoViewsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Adds sample video views data
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleVideoViewsResponse> AddSampleVideoViewsAsync(global::KillrVideo.SampleData.AddSampleVideoViewsRequest request, CallOptions options);
      /// <summary>
      ///  Adds sample YouTube video data
      /// </summary>
      global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse AddSampleYouTubeVideos(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Adds sample YouTube video data
      /// </summary>
      global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse AddSampleYouTubeVideos(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest request, CallOptions options);
      /// <summary>
      ///  Adds sample YouTube video data
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse> AddSampleYouTubeVideosAsync(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Adds sample YouTube video data
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse> AddSampleYouTubeVideosAsync(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest request, CallOptions options);
      /// <summary>
      ///  Triggers a refresh of the YouTube sample video data sources
      /// </summary>
      global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse RefreshYouTubeSources(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Triggers a refresh of the YouTube sample video data sources
      /// </summary>
      global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse RefreshYouTubeSources(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest request, CallOptions options);
      /// <summary>
      ///  Triggers a refresh of the YouTube sample video data sources
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse> RefreshYouTubeSourcesAsync(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Triggers a refresh of the YouTube sample video data sources
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse> RefreshYouTubeSourcesAsync(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest request, CallOptions options);
    }

    /// <summary>Interface of server-side implementations of SampleDataService</summary>
    [System.Obsolete("Service implementations should inherit from the generated abstract base class instead.")]
    public interface ISampleDataService
    {
      /// <summary>
      ///  Adds sample comment data
      /// </summary>
      global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.AddSampleCommentsResponse> AddSampleComments(global::KillrVideo.SampleData.AddSampleCommentsRequest request, ServerCallContext context);
      /// <summary>
      ///  Adds sample ratings data
      /// </summary>
      global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.AddSampleRatingsResponse> AddSampleRatings(global::KillrVideo.SampleData.AddSampleRatingsRequest request, ServerCallContext context);
      /// <summary>
      ///  Adds sample users data
      /// </summary>
      global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.AddSampleUsersResponse> AddSampleUsers(global::KillrVideo.SampleData.AddSampleUsersRequest request, ServerCallContext context);
      /// <summary>
      ///  Adds sample video views data
      /// </summary>
      global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.AddSampleVideoViewsResponse> AddSampleVideoViews(global::KillrVideo.SampleData.AddSampleVideoViewsRequest request, ServerCallContext context);
      /// <summary>
      ///  Adds sample YouTube video data
      /// </summary>
      global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse> AddSampleYouTubeVideos(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest request, ServerCallContext context);
      /// <summary>
      ///  Triggers a refresh of the YouTube sample video data sources
      /// </summary>
      global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse> RefreshYouTubeSources(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest request, ServerCallContext context);
    }

    /// <summary>Base class for server-side implementations of SampleDataService</summary>
    public abstract class SampleDataServiceBase
    {
      /// <summary>
      ///  Adds sample comment data
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.AddSampleCommentsResponse> AddSampleComments(global::KillrVideo.SampleData.AddSampleCommentsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Adds sample ratings data
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.AddSampleRatingsResponse> AddSampleRatings(global::KillrVideo.SampleData.AddSampleRatingsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Adds sample users data
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.AddSampleUsersResponse> AddSampleUsers(global::KillrVideo.SampleData.AddSampleUsersRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Adds sample video views data
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.AddSampleVideoViewsResponse> AddSampleVideoViews(global::KillrVideo.SampleData.AddSampleVideoViewsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Adds sample YouTube video data
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse> AddSampleYouTubeVideos(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Triggers a refresh of the YouTube sample video data sources
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse> RefreshYouTubeSources(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SampleDataService</summary>
    #pragma warning disable 0618
    public class SampleDataServiceClient : ClientBase<SampleDataServiceClient>, ISampleDataServiceClient
    #pragma warning restore 0618
    {
      public SampleDataServiceClient(Channel channel) : base(channel)
      {
      }
      public SampleDataServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      ///<summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SampleDataServiceClient() : base()
      {
      }
      ///<summary>Protected constructor to allow creation of configured clients.</summary>
      protected SampleDataServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Adds sample comment data
      /// </summary>
      public virtual global::KillrVideo.SampleData.AddSampleCommentsResponse AddSampleComments(global::KillrVideo.SampleData.AddSampleCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSampleComments(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds sample comment data
      /// </summary>
      public virtual global::KillrVideo.SampleData.AddSampleCommentsResponse AddSampleComments(global::KillrVideo.SampleData.AddSampleCommentsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSampleComments, null, options, request);
      }
      /// <summary>
      ///  Adds sample comment data
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleCommentsResponse> AddSampleCommentsAsync(global::KillrVideo.SampleData.AddSampleCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSampleCommentsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds sample comment data
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleCommentsResponse> AddSampleCommentsAsync(global::KillrVideo.SampleData.AddSampleCommentsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSampleComments, null, options, request);
      }
      /// <summary>
      ///  Adds sample ratings data
      /// </summary>
      public virtual global::KillrVideo.SampleData.AddSampleRatingsResponse AddSampleRatings(global::KillrVideo.SampleData.AddSampleRatingsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSampleRatings(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds sample ratings data
      /// </summary>
      public virtual global::KillrVideo.SampleData.AddSampleRatingsResponse AddSampleRatings(global::KillrVideo.SampleData.AddSampleRatingsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSampleRatings, null, options, request);
      }
      /// <summary>
      ///  Adds sample ratings data
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleRatingsResponse> AddSampleRatingsAsync(global::KillrVideo.SampleData.AddSampleRatingsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSampleRatingsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds sample ratings data
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleRatingsResponse> AddSampleRatingsAsync(global::KillrVideo.SampleData.AddSampleRatingsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSampleRatings, null, options, request);
      }
      /// <summary>
      ///  Adds sample users data
      /// </summary>
      public virtual global::KillrVideo.SampleData.AddSampleUsersResponse AddSampleUsers(global::KillrVideo.SampleData.AddSampleUsersRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSampleUsers(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds sample users data
      /// </summary>
      public virtual global::KillrVideo.SampleData.AddSampleUsersResponse AddSampleUsers(global::KillrVideo.SampleData.AddSampleUsersRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSampleUsers, null, options, request);
      }
      /// <summary>
      ///  Adds sample users data
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleUsersResponse> AddSampleUsersAsync(global::KillrVideo.SampleData.AddSampleUsersRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSampleUsersAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds sample users data
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleUsersResponse> AddSampleUsersAsync(global::KillrVideo.SampleData.AddSampleUsersRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSampleUsers, null, options, request);
      }
      /// <summary>
      ///  Adds sample video views data
      /// </summary>
      public virtual global::KillrVideo.SampleData.AddSampleVideoViewsResponse AddSampleVideoViews(global::KillrVideo.SampleData.AddSampleVideoViewsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSampleVideoViews(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds sample video views data
      /// </summary>
      public virtual global::KillrVideo.SampleData.AddSampleVideoViewsResponse AddSampleVideoViews(global::KillrVideo.SampleData.AddSampleVideoViewsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSampleVideoViews, null, options, request);
      }
      /// <summary>
      ///  Adds sample video views data
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleVideoViewsResponse> AddSampleVideoViewsAsync(global::KillrVideo.SampleData.AddSampleVideoViewsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSampleVideoViewsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds sample video views data
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleVideoViewsResponse> AddSampleVideoViewsAsync(global::KillrVideo.SampleData.AddSampleVideoViewsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSampleVideoViews, null, options, request);
      }
      /// <summary>
      ///  Adds sample YouTube video data
      /// </summary>
      public virtual global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse AddSampleYouTubeVideos(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSampleYouTubeVideos(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds sample YouTube video data
      /// </summary>
      public virtual global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse AddSampleYouTubeVideos(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSampleYouTubeVideos, null, options, request);
      }
      /// <summary>
      ///  Adds sample YouTube video data
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse> AddSampleYouTubeVideosAsync(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSampleYouTubeVideosAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds sample YouTube video data
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.AddSampleYouTubeVideosResponse> AddSampleYouTubeVideosAsync(global::KillrVideo.SampleData.AddSampleYouTubeVideosRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSampleYouTubeVideos, null, options, request);
      }
      /// <summary>
      ///  Triggers a refresh of the YouTube sample video data sources
      /// </summary>
      public virtual global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse RefreshYouTubeSources(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RefreshYouTubeSources(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Triggers a refresh of the YouTube sample video data sources
      /// </summary>
      public virtual global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse RefreshYouTubeSources(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RefreshYouTubeSources, null, options, request);
      }
      /// <summary>
      ///  Triggers a refresh of the YouTube sample video data sources
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse> RefreshYouTubeSourcesAsync(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RefreshYouTubeSourcesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Triggers a refresh of the YouTube sample video data sources
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.SampleData.RefreshYouTubeSourcesResponse> RefreshYouTubeSourcesAsync(global::KillrVideo.SampleData.RefreshYouTubeSourcesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RefreshYouTubeSources, null, options, request);
      }
      protected override SampleDataServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SampleDataServiceClient(configuration);
      }
    }

    /// <summary>Creates a new client for SampleDataService</summary>
    public static SampleDataServiceClient NewClient(Channel channel)
    {
      return new SampleDataServiceClient(channel);
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(ISampleDataService serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_AddSampleComments, serviceImpl.AddSampleComments)
          .AddMethod(__Method_AddSampleRatings, serviceImpl.AddSampleRatings)
          .AddMethod(__Method_AddSampleUsers, serviceImpl.AddSampleUsers)
          .AddMethod(__Method_AddSampleVideoViews, serviceImpl.AddSampleVideoViews)
          .AddMethod(__Method_AddSampleYouTubeVideos, serviceImpl.AddSampleYouTubeVideos)
          .AddMethod(__Method_RefreshYouTubeSources, serviceImpl.RefreshYouTubeSources).Build();
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(SampleDataServiceBase serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_AddSampleComments, serviceImpl.AddSampleComments)
          .AddMethod(__Method_AddSampleRatings, serviceImpl.AddSampleRatings)
          .AddMethod(__Method_AddSampleUsers, serviceImpl.AddSampleUsers)
          .AddMethod(__Method_AddSampleVideoViews, serviceImpl.AddSampleVideoViews)
          .AddMethod(__Method_AddSampleYouTubeVideos, serviceImpl.AddSampleYouTubeVideos)
          .AddMethod(__Method_RefreshYouTubeSources, serviceImpl.RefreshYouTubeSources).Build();
    }

  }
}
#endregion
