// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suggested-videos/suggested_videos_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace KillrVideo.SuggestedVideos {
  public static class SuggestedVideoService
  {
    static readonly string __ServiceName = "killrvideo.suggested_videos.SuggestedVideoService";

    static readonly Marshaller<global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest> __Marshaller_GetRelatedVideosRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse> __Marshaller_GetRelatedVideosResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest> __Marshaller_GetSuggestedForUserRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse> __Marshaller_GetSuggestedForUserResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse.Parser.ParseFrom);

    static readonly Method<global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest, global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse> __Method_GetRelatedVideos = new Method<global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest, global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetRelatedVideos",
        __Marshaller_GetRelatedVideosRequest,
        __Marshaller_GetRelatedVideosResponse);

    static readonly Method<global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest, global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse> __Method_GetSuggestedForUser = new Method<global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest, global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetSuggestedForUser",
        __Marshaller_GetSuggestedForUserRequest,
        __Marshaller_GetSuggestedForUserResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::KillrVideo.SuggestedVideos.SuggestedVideosServiceReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface ISuggestedVideoServiceClient
    {
      global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse GetRelatedVideos(global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse GetRelatedVideos(global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse> GetRelatedVideosAsync(global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse> GetRelatedVideosAsync(global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest request, CallOptions options);
      global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse GetSuggestedForUser(global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse GetSuggestedForUser(global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse> GetSuggestedForUserAsync(global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse> GetSuggestedForUserAsync(global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest request, CallOptions options);
    }

    // server-side interface
    public interface ISuggestedVideoService
    {
      Task<global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse> GetRelatedVideos(global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest request, ServerCallContext context);
      Task<global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse> GetSuggestedForUser(global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest request, ServerCallContext context);
    }

    // client stub
    public class SuggestedVideoServiceClient : ClientBase, ISuggestedVideoServiceClient
    {
      public SuggestedVideoServiceClient(Channel channel) : base(channel)
      {
      }
      public global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse GetRelatedVideos(global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetRelatedVideos, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse GetRelatedVideos(global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetRelatedVideos, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse> GetRelatedVideosAsync(global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetRelatedVideos, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.SuggestedVideos.GetRelatedVideosResponse> GetRelatedVideosAsync(global::KillrVideo.SuggestedVideos.GetRelatedVideosRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetRelatedVideos, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse GetSuggestedForUser(global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetSuggestedForUser, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse GetSuggestedForUser(global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetSuggestedForUser, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse> GetSuggestedForUserAsync(global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetSuggestedForUser, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.SuggestedVideos.GetSuggestedForUserResponse> GetSuggestedForUserAsync(global::KillrVideo.SuggestedVideos.GetSuggestedForUserRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetSuggestedForUser, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(ISuggestedVideoService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_GetRelatedVideos, serviceImpl.GetRelatedVideos)
          .AddMethod(__Method_GetSuggestedForUser, serviceImpl.GetSuggestedForUser).Build();
    }

    // creates a new client
    public static SuggestedVideoServiceClient NewClient(Channel channel)
    {
      return new SuggestedVideoServiceClient(channel);
    }

  }
}
#endregion
