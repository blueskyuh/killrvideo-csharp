// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video-catalog/video_catalog_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace KillrVideo.VideoCatalog {

  /// <summary>Holder for reflection information generated from video-catalog/video_catalog_service.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class VideoCatalogServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for video-catalog/video_catalog_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VideoCatalogServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cil2aWRlby1jYXRhbG9nL3ZpZGVvX2NhdGFsb2dfc2VydmljZS5wcm90bxIY",
            "a2lsbHJ2aWRlby52aWRlb19jYXRhbG9nGh9nb29nbGUvcHJvdG9idWYvdGlt",
            "ZXN0YW1wLnByb3RvGhljb21tb24vY29tbW9uX3R5cGVzLnByb3RvIrYBChpT",
            "dWJtaXRVcGxvYWRlZFZpZGVvUmVxdWVzdBIpCgh2aWRlb19pZBgBIAEoCzIX",
            "LmtpbGxydmlkZW8uY29tbW9uLlV1aWQSKAoHdXNlcl9pZBgCIAEoCzIXLmtp",
            "bGxydmlkZW8uY29tbW9uLlV1aWQSDAoEbmFtZRgDIAEoCRITCgtkZXNjcmlw",
            "dGlvbhgEIAEoCRIMCgR0YWdzGAUgAygJEhIKCnVwbG9hZF91cmwYBiABKAki",
            "HQobU3VibWl0VXBsb2FkZWRWaWRlb1Jlc3BvbnNlIrwBChlTdWJtaXRZb3VU",
            "dWJlVmlkZW9SZXF1ZXN0EikKCHZpZGVvX2lkGAEgASgLMhcua2lsbHJ2aWRl",
            "by5jb21tb24uVXVpZBIoCgd1c2VyX2lkGAIgASgLMhcua2lsbHJ2aWRlby5j",
            "b21tb24uVXVpZBIMCgRuYW1lGAMgASgJEhMKC2Rlc2NyaXB0aW9uGAQgASgJ",
            "EgwKBHRhZ3MYBSADKAkSGQoReW91X3R1YmVfdmlkZW9faWQYBiABKAkiHAoa",
            "U3VibWl0WW91VHViZVZpZGVvUmVzcG9uc2UiPAoPR2V0VmlkZW9SZXF1ZXN0",
            "EikKCHZpZGVvX2lkGAEgASgLMhcua2lsbHJ2aWRlby5jb21tb24uVXVpZCKe",
            "AgoQR2V0VmlkZW9SZXNwb25zZRIpCgh2aWRlb19pZBgBIAEoCzIXLmtpbGxy",
            "dmlkZW8uY29tbW9uLlV1aWQSKAoHdXNlcl9pZBgCIAEoCzIXLmtpbGxydmlk",
            "ZW8uY29tbW9uLlV1aWQSDAoEbmFtZRgDIAEoCRITCgtkZXNjcmlwdGlvbhgE",
            "IAEoCRIQCghsb2NhdGlvbhgFIAEoCRJCCg1sb2NhdGlvbl90eXBlGAYgASgO",
            "Misua2lsbHJ2aWRlby52aWRlb19jYXRhbG9nLlZpZGVvTG9jYXRpb25UeXBl",
            "EgwKBHRhZ3MYByADKAkSLgoKYWRkZWRfZGF0ZRgIIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXAiRQoXR2V0VmlkZW9QcmV2aWV3c1JlcXVlc3QS",
            "KgoJdmlkZW9faWRzGAEgAygLMhcua2lsbHJ2aWRlby5jb21tb24uVXVpZCJa",
            "ChhHZXRWaWRlb1ByZXZpZXdzUmVzcG9uc2USPgoOdmlkZW9fcHJldmlld3MY",
            "ASADKAsyJi5raWxscnZpZGVvLnZpZGVvX2NhdGFsb2cuVmlkZW9QcmV2aWV3",
            "IsEBCgxWaWRlb1ByZXZpZXcSKQoIdmlkZW9faWQYASABKAsyFy5raWxscnZp",
            "ZGVvLmNvbW1vbi5VdWlkEi4KCmFkZGVkX2RhdGUYAiABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEgwKBG5hbWUYAyABKAkSHgoWcHJldmlld19p",
            "bWFnZV9sb2NhdGlvbhgEIAEoCRIoCgd1c2VyX2lkGAUgASgLMhcua2lsbHJ2",
            "aWRlby5jb21tb24uVXVpZCJICh1HZXRMYXRlc3RWaWRlb1ByZXZpZXdzUmVx",
            "dWVzdBIRCglwYWdlX3NpemUYASABKAUSFAoMcGFnaW5nX3N0YXRlGBAgASgJ",
            "InYKHkdldExhdGVzdFZpZGVvUHJldmlld3NSZXNwb25zZRI+Cg52aWRlb19w",
            "cmV2aWV3cxgBIAMoCzImLmtpbGxydmlkZW8udmlkZW9fY2F0YWxvZy5WaWRl",
            "b1ByZXZpZXcSFAoMcGFnaW5nX3N0YXRlGAIgASgJInAKG0dldFVzZXJWaWRl",
            "b1ByZXZpZXdzUmVxdWVzdBIoCgd1c2VyX2lkGAEgASgLMhcua2lsbHJ2aWRl",
            "by5jb21tb24uVXVpZBIRCglwYWdlX3NpemUYAiABKAUSFAoMcGFnaW5nX3N0",
            "YXRlGBAgASgJIp4BChxHZXRVc2VyVmlkZW9QcmV2aWV3c1Jlc3BvbnNlEigK",
            "B3VzZXJfaWQYASABKAsyFy5raWxscnZpZGVvLmNvbW1vbi5VdWlkEj4KDnZp",
            "ZGVvX3ByZXZpZXdzGAIgAygLMiYua2lsbHJ2aWRlby52aWRlb19jYXRhbG9n",
            "LlZpZGVvUHJldmlldxIUCgxwYWdpbmdfc3RhdGUYAyABKAkqLAoRVmlkZW9M",
            "b2NhdGlvblR5cGUSCwoHWU9VVFVCRRAAEgoKBlVQTE9BRBABMo8GChNWaWRl",
            "b0NhdGFsb2dTZXJ2aWNlEoIBChNTdWJtaXRVcGxvYWRlZFZpZGVvEjQua2ls",
            "bHJ2aWRlby52aWRlb19jYXRhbG9nLlN1Ym1pdFVwbG9hZGVkVmlkZW9SZXF1",
            "ZXN0GjUua2lsbHJ2aWRlby52aWRlb19jYXRhbG9nLlN1Ym1pdFVwbG9hZGVk",
            "VmlkZW9SZXNwb25zZRJ/ChJTdWJtaXRZb3VUdWJlVmlkZW8SMy5raWxscnZp",
            "ZGVvLnZpZGVvX2NhdGFsb2cuU3VibWl0WW91VHViZVZpZGVvUmVxdWVzdBo0",
            "LmtpbGxydmlkZW8udmlkZW9fY2F0YWxvZy5TdWJtaXRZb3VUdWJlVmlkZW9S",
            "ZXNwb25zZRJhCghHZXRWaWRlbxIpLmtpbGxydmlkZW8udmlkZW9fY2F0YWxv",
            "Zy5HZXRWaWRlb1JlcXVlc3QaKi5raWxscnZpZGVvLnZpZGVvX2NhdGFsb2cu",
            "R2V0VmlkZW9SZXNwb25zZRJ5ChBHZXRWaWRlb1ByZXZpZXdzEjEua2lsbHJ2",
            "aWRlby52aWRlb19jYXRhbG9nLkdldFZpZGVvUHJldmlld3NSZXF1ZXN0GjIu",
            "a2lsbHJ2aWRlby52aWRlb19jYXRhbG9nLkdldFZpZGVvUHJldmlld3NSZXNw",
            "b25zZRKLAQoWR2V0TGF0ZXN0VmlkZW9QcmV2aWV3cxI3LmtpbGxydmlkZW8u",
            "dmlkZW9fY2F0YWxvZy5HZXRMYXRlc3RWaWRlb1ByZXZpZXdzUmVxdWVzdBo4",
            "LmtpbGxydmlkZW8udmlkZW9fY2F0YWxvZy5HZXRMYXRlc3RWaWRlb1ByZXZp",
            "ZXdzUmVzcG9uc2UShQEKFEdldFVzZXJWaWRlb1ByZXZpZXdzEjUua2lsbHJ2",
            "aWRlby52aWRlb19jYXRhbG9nLkdldFVzZXJWaWRlb1ByZXZpZXdzUmVxdWVz",
            "dBo2LmtpbGxydmlkZW8udmlkZW9fY2F0YWxvZy5HZXRVc2VyVmlkZW9QcmV2",
            "aWV3c1Jlc3BvbnNlQhqqAhdLaWxsclZpZGVvLlZpZGVvQ2F0YWxvZ2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::KillrVideo.Common.CommonTypesReflection.Descriptor, },
          new pbr::GeneratedCodeInfo(new[] {typeof(global::KillrVideo.VideoCatalog.VideoLocationType), }, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.SubmitUploadedVideoRequest), global::KillrVideo.VideoCatalog.SubmitUploadedVideoRequest.Parser, new[]{ "VideoId", "UserId", "Name", "Description", "Tags", "UploadUrl" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.SubmitUploadedVideoResponse), global::KillrVideo.VideoCatalog.SubmitUploadedVideoResponse.Parser, null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.SubmitYouTubeVideoRequest), global::KillrVideo.VideoCatalog.SubmitYouTubeVideoRequest.Parser, new[]{ "VideoId", "UserId", "Name", "Description", "Tags", "YouTubeVideoId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.SubmitYouTubeVideoResponse), global::KillrVideo.VideoCatalog.SubmitYouTubeVideoResponse.Parser, null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.GetVideoRequest), global::KillrVideo.VideoCatalog.GetVideoRequest.Parser, new[]{ "VideoId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.GetVideoResponse), global::KillrVideo.VideoCatalog.GetVideoResponse.Parser, new[]{ "VideoId", "UserId", "Name", "Description", "Location", "LocationType", "Tags", "AddedDate" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.GetVideoPreviewsRequest), global::KillrVideo.VideoCatalog.GetVideoPreviewsRequest.Parser, new[]{ "VideoIds" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.GetVideoPreviewsResponse), global::KillrVideo.VideoCatalog.GetVideoPreviewsResponse.Parser, new[]{ "VideoPreviews" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.VideoPreview), global::KillrVideo.VideoCatalog.VideoPreview.Parser, new[]{ "VideoId", "AddedDate", "Name", "PreviewImageLocation", "UserId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.GetLatestVideoPreviewsRequest), global::KillrVideo.VideoCatalog.GetLatestVideoPreviewsRequest.Parser, new[]{ "PageSize", "PagingState" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.GetLatestVideoPreviewsResponse), global::KillrVideo.VideoCatalog.GetLatestVideoPreviewsResponse.Parser, new[]{ "VideoPreviews", "PagingState" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.GetUserVideoPreviewsRequest), global::KillrVideo.VideoCatalog.GetUserVideoPreviewsRequest.Parser, new[]{ "UserId", "PageSize", "PagingState" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::KillrVideo.VideoCatalog.GetUserVideoPreviewsResponse), global::KillrVideo.VideoCatalog.GetUserVideoPreviewsResponse.Parser, new[]{ "UserId", "VideoPreviews", "PagingState" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Enum representing what kind of video location is present for a video
  /// </summary>
  public enum VideoLocationType {
    YOUTUBE = 0,
    UPLOAD = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  Request to submit a new uploaded video to the catalog
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SubmitUploadedVideoRequest : pb::IMessage<SubmitUploadedVideoRequest> {
    private static readonly pb::MessageParser<SubmitUploadedVideoRequest> _parser = new pb::MessageParser<SubmitUploadedVideoRequest>(() => new SubmitUploadedVideoRequest());
    public static pb::MessageParser<SubmitUploadedVideoRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SubmitUploadedVideoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SubmitUploadedVideoRequest(SubmitUploadedVideoRequest other) : this() {
      VideoId = other.videoId_ != null ? other.VideoId.Clone() : null;
      UserId = other.userId_ != null ? other.UserId.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      tags_ = other.tags_.Clone();
      uploadUrl_ = other.uploadUrl_;
    }

    public SubmitUploadedVideoRequest Clone() {
      return new SubmitUploadedVideoRequest(this);
    }

    /// <summary>Field number for the "video_id" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private global::KillrVideo.Common.Uuid videoId_;
    public global::KillrVideo.Common.Uuid VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private global::KillrVideo.Common.Uuid userId_;
    public global::KillrVideo.Common.Uuid UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "upload_url" field.</summary>
    public const int UploadUrlFieldNumber = 6;
    private string uploadUrl_ = "";
    public string UploadUrl {
      get { return uploadUrl_; }
      set {
        uploadUrl_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SubmitUploadedVideoRequest);
    }

    public bool Equals(SubmitUploadedVideoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VideoId, other.VideoId)) return false;
      if (!object.Equals(UserId, other.UserId)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (UploadUrl != other.UploadUrl) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (videoId_ != null) hash ^= VideoId.GetHashCode();
      if (userId_ != null) hash ^= UserId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (UploadUrl.Length != 0) hash ^= UploadUrl.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (videoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoId);
      }
      if (userId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (UploadUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UploadUrl);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (videoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoId);
      }
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (UploadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UploadUrl);
      }
      return size;
    }

    public void MergeFrom(SubmitUploadedVideoRequest other) {
      if (other == null) {
        return;
      }
      if (other.videoId_ != null) {
        if (videoId_ == null) {
          videoId_ = new global::KillrVideo.Common.Uuid();
        }
        VideoId.MergeFrom(other.VideoId);
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          userId_ = new global::KillrVideo.Common.Uuid();
        }
        UserId.MergeFrom(other.UserId);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      tags_.Add(other.tags_);
      if (other.UploadUrl.Length != 0) {
        UploadUrl = other.UploadUrl;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videoId_ == null) {
              videoId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(videoId_);
            break;
          }
          case 18: {
            if (userId_ == null) {
              userId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(userId_);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 50: {
            UploadUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when submitting a new uploaded video to the catalog
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SubmitUploadedVideoResponse : pb::IMessage<SubmitUploadedVideoResponse> {
    private static readonly pb::MessageParser<SubmitUploadedVideoResponse> _parser = new pb::MessageParser<SubmitUploadedVideoResponse>(() => new SubmitUploadedVideoResponse());
    public static pb::MessageParser<SubmitUploadedVideoResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SubmitUploadedVideoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SubmitUploadedVideoResponse(SubmitUploadedVideoResponse other) : this() {
    }

    public SubmitUploadedVideoResponse Clone() {
      return new SubmitUploadedVideoResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as SubmitUploadedVideoResponse);
    }

    public bool Equals(SubmitUploadedVideoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(SubmitUploadedVideoResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  Request to submit a new YouTube video to the catalog
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SubmitYouTubeVideoRequest : pb::IMessage<SubmitYouTubeVideoRequest> {
    private static readonly pb::MessageParser<SubmitYouTubeVideoRequest> _parser = new pb::MessageParser<SubmitYouTubeVideoRequest>(() => new SubmitYouTubeVideoRequest());
    public static pb::MessageParser<SubmitYouTubeVideoRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SubmitYouTubeVideoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SubmitYouTubeVideoRequest(SubmitYouTubeVideoRequest other) : this() {
      VideoId = other.videoId_ != null ? other.VideoId.Clone() : null;
      UserId = other.userId_ != null ? other.UserId.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      tags_ = other.tags_.Clone();
      youTubeVideoId_ = other.youTubeVideoId_;
    }

    public SubmitYouTubeVideoRequest Clone() {
      return new SubmitYouTubeVideoRequest(this);
    }

    /// <summary>Field number for the "video_id" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private global::KillrVideo.Common.Uuid videoId_;
    public global::KillrVideo.Common.Uuid VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private global::KillrVideo.Common.Uuid userId_;
    public global::KillrVideo.Common.Uuid UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "you_tube_video_id" field.</summary>
    public const int YouTubeVideoIdFieldNumber = 6;
    private string youTubeVideoId_ = "";
    public string YouTubeVideoId {
      get { return youTubeVideoId_; }
      set {
        youTubeVideoId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SubmitYouTubeVideoRequest);
    }

    public bool Equals(SubmitYouTubeVideoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VideoId, other.VideoId)) return false;
      if (!object.Equals(UserId, other.UserId)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (YouTubeVideoId != other.YouTubeVideoId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (videoId_ != null) hash ^= VideoId.GetHashCode();
      if (userId_ != null) hash ^= UserId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (YouTubeVideoId.Length != 0) hash ^= YouTubeVideoId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (videoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoId);
      }
      if (userId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (YouTubeVideoId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(YouTubeVideoId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (videoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoId);
      }
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (YouTubeVideoId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(YouTubeVideoId);
      }
      return size;
    }

    public void MergeFrom(SubmitYouTubeVideoRequest other) {
      if (other == null) {
        return;
      }
      if (other.videoId_ != null) {
        if (videoId_ == null) {
          videoId_ = new global::KillrVideo.Common.Uuid();
        }
        VideoId.MergeFrom(other.VideoId);
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          userId_ = new global::KillrVideo.Common.Uuid();
        }
        UserId.MergeFrom(other.UserId);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      tags_.Add(other.tags_);
      if (other.YouTubeVideoId.Length != 0) {
        YouTubeVideoId = other.YouTubeVideoId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videoId_ == null) {
              videoId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(videoId_);
            break;
          }
          case 18: {
            if (userId_ == null) {
              userId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(userId_);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 50: {
            YouTubeVideoId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when submitting a new YouTube video to the catalog
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SubmitYouTubeVideoResponse : pb::IMessage<SubmitYouTubeVideoResponse> {
    private static readonly pb::MessageParser<SubmitYouTubeVideoResponse> _parser = new pb::MessageParser<SubmitYouTubeVideoResponse>(() => new SubmitYouTubeVideoResponse());
    public static pb::MessageParser<SubmitYouTubeVideoResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SubmitYouTubeVideoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SubmitYouTubeVideoResponse(SubmitYouTubeVideoResponse other) : this() {
    }

    public SubmitYouTubeVideoResponse Clone() {
      return new SubmitYouTubeVideoResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as SubmitYouTubeVideoResponse);
    }

    public bool Equals(SubmitYouTubeVideoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(SubmitYouTubeVideoResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  Request to get a video and all its details from the catalog
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetVideoRequest : pb::IMessage<GetVideoRequest> {
    private static readonly pb::MessageParser<GetVideoRequest> _parser = new pb::MessageParser<GetVideoRequest>(() => new GetVideoRequest());
    public static pb::MessageParser<GetVideoRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetVideoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetVideoRequest(GetVideoRequest other) : this() {
      VideoId = other.videoId_ != null ? other.VideoId.Clone() : null;
    }

    public GetVideoRequest Clone() {
      return new GetVideoRequest(this);
    }

    /// <summary>Field number for the "video_id" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private global::KillrVideo.Common.Uuid videoId_;
    public global::KillrVideo.Common.Uuid VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetVideoRequest);
    }

    public bool Equals(GetVideoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VideoId, other.VideoId)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (videoId_ != null) hash ^= VideoId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (videoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (videoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoId);
      }
      return size;
    }

    public void MergeFrom(GetVideoRequest other) {
      if (other == null) {
        return;
      }
      if (other.videoId_ != null) {
        if (videoId_ == null) {
          videoId_ = new global::KillrVideo.Common.Uuid();
        }
        VideoId.MergeFrom(other.VideoId);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videoId_ == null) {
              videoId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(videoId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when getting a video and all its details from the catalog
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetVideoResponse : pb::IMessage<GetVideoResponse> {
    private static readonly pb::MessageParser<GetVideoResponse> _parser = new pb::MessageParser<GetVideoResponse>(() => new GetVideoResponse());
    public static pb::MessageParser<GetVideoResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetVideoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetVideoResponse(GetVideoResponse other) : this() {
      VideoId = other.videoId_ != null ? other.VideoId.Clone() : null;
      UserId = other.userId_ != null ? other.UserId.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      location_ = other.location_;
      locationType_ = other.locationType_;
      tags_ = other.tags_.Clone();
      AddedDate = other.addedDate_ != null ? other.AddedDate.Clone() : null;
    }

    public GetVideoResponse Clone() {
      return new GetVideoResponse(this);
    }

    /// <summary>Field number for the "video_id" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private global::KillrVideo.Common.Uuid videoId_;
    public global::KillrVideo.Common.Uuid VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private global::KillrVideo.Common.Uuid userId_;
    public global::KillrVideo.Common.Uuid UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 5;
    private string location_ = "";
    public string Location {
      get { return location_; }
      set {
        location_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location_type" field.</summary>
    public const int LocationTypeFieldNumber = 6;
    private global::KillrVideo.VideoCatalog.VideoLocationType locationType_ = global::KillrVideo.VideoCatalog.VideoLocationType.YOUTUBE;
    public global::KillrVideo.VideoCatalog.VideoLocationType LocationType {
      get { return locationType_; }
      set {
        locationType_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "added_date" field.</summary>
    public const int AddedDateFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp addedDate_;
    public global::Google.Protobuf.WellKnownTypes.Timestamp AddedDate {
      get { return addedDate_; }
      set {
        addedDate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetVideoResponse);
    }

    public bool Equals(GetVideoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VideoId, other.VideoId)) return false;
      if (!object.Equals(UserId, other.UserId)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Location != other.Location) return false;
      if (LocationType != other.LocationType) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (!object.Equals(AddedDate, other.AddedDate)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (videoId_ != null) hash ^= VideoId.GetHashCode();
      if (userId_ != null) hash ^= UserId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (LocationType != global::KillrVideo.VideoCatalog.VideoLocationType.YOUTUBE) hash ^= LocationType.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (addedDate_ != null) hash ^= AddedDate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (videoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoId);
      }
      if (userId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Location);
      }
      if (LocationType != global::KillrVideo.VideoCatalog.VideoLocationType.YOUTUBE) {
        output.WriteRawTag(48);
        output.WriteEnum((int) LocationType);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (addedDate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(AddedDate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (videoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoId);
      }
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (LocationType != global::KillrVideo.VideoCatalog.VideoLocationType.YOUTUBE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LocationType);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (addedDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddedDate);
      }
      return size;
    }

    public void MergeFrom(GetVideoResponse other) {
      if (other == null) {
        return;
      }
      if (other.videoId_ != null) {
        if (videoId_ == null) {
          videoId_ = new global::KillrVideo.Common.Uuid();
        }
        VideoId.MergeFrom(other.VideoId);
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          userId_ = new global::KillrVideo.Common.Uuid();
        }
        UserId.MergeFrom(other.UserId);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.LocationType != global::KillrVideo.VideoCatalog.VideoLocationType.YOUTUBE) {
        LocationType = other.LocationType;
      }
      tags_.Add(other.tags_);
      if (other.addedDate_ != null) {
        if (addedDate_ == null) {
          addedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AddedDate.MergeFrom(other.AddedDate);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videoId_ == null) {
              videoId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(videoId_);
            break;
          }
          case 18: {
            if (userId_ == null) {
              userId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(userId_);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            Location = input.ReadString();
            break;
          }
          case 48: {
            locationType_ = (global::KillrVideo.VideoCatalog.VideoLocationType) input.ReadEnum();
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 66: {
            if (addedDate_ == null) {
              addedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(addedDate_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request for getting some video previews by the video ids
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetVideoPreviewsRequest : pb::IMessage<GetVideoPreviewsRequest> {
    private static readonly pb::MessageParser<GetVideoPreviewsRequest> _parser = new pb::MessageParser<GetVideoPreviewsRequest>(() => new GetVideoPreviewsRequest());
    public static pb::MessageParser<GetVideoPreviewsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetVideoPreviewsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetVideoPreviewsRequest(GetVideoPreviewsRequest other) : this() {
      videoIds_ = other.videoIds_.Clone();
    }

    public GetVideoPreviewsRequest Clone() {
      return new GetVideoPreviewsRequest(this);
    }

    /// <summary>Field number for the "video_ids" field.</summary>
    public const int VideoIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::KillrVideo.Common.Uuid> _repeated_videoIds_codec
        = pb::FieldCodec.ForMessage(10, global::KillrVideo.Common.Uuid.Parser);
    private readonly pbc::RepeatedField<global::KillrVideo.Common.Uuid> videoIds_ = new pbc::RepeatedField<global::KillrVideo.Common.Uuid>();
    public pbc::RepeatedField<global::KillrVideo.Common.Uuid> VideoIds {
      get { return videoIds_; }
    }

    public override bool Equals(object other) {
      return Equals(other as GetVideoPreviewsRequest);
    }

    public bool Equals(GetVideoPreviewsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!videoIds_.Equals(other.videoIds_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= videoIds_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      videoIds_.WriteTo(output, _repeated_videoIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += videoIds_.CalculateSize(_repeated_videoIds_codec);
      return size;
    }

    public void MergeFrom(GetVideoPreviewsRequest other) {
      if (other == null) {
        return;
      }
      videoIds_.Add(other.videoIds_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            videoIds_.AddEntriesFrom(input, _repeated_videoIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when getting some video previews by their ids
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetVideoPreviewsResponse : pb::IMessage<GetVideoPreviewsResponse> {
    private static readonly pb::MessageParser<GetVideoPreviewsResponse> _parser = new pb::MessageParser<GetVideoPreviewsResponse>(() => new GetVideoPreviewsResponse());
    public static pb::MessageParser<GetVideoPreviewsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetVideoPreviewsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetVideoPreviewsResponse(GetVideoPreviewsResponse other) : this() {
      videoPreviews_ = other.videoPreviews_.Clone();
    }

    public GetVideoPreviewsResponse Clone() {
      return new GetVideoPreviewsResponse(this);
    }

    /// <summary>Field number for the "video_previews" field.</summary>
    public const int VideoPreviewsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::KillrVideo.VideoCatalog.VideoPreview> _repeated_videoPreviews_codec
        = pb::FieldCodec.ForMessage(10, global::KillrVideo.VideoCatalog.VideoPreview.Parser);
    private readonly pbc::RepeatedField<global::KillrVideo.VideoCatalog.VideoPreview> videoPreviews_ = new pbc::RepeatedField<global::KillrVideo.VideoCatalog.VideoPreview>();
    public pbc::RepeatedField<global::KillrVideo.VideoCatalog.VideoPreview> VideoPreviews {
      get { return videoPreviews_; }
    }

    public override bool Equals(object other) {
      return Equals(other as GetVideoPreviewsResponse);
    }

    public bool Equals(GetVideoPreviewsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!videoPreviews_.Equals(other.videoPreviews_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= videoPreviews_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      videoPreviews_.WriteTo(output, _repeated_videoPreviews_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += videoPreviews_.CalculateSize(_repeated_videoPreviews_codec);
      return size;
    }

    public void MergeFrom(GetVideoPreviewsResponse other) {
      if (other == null) {
        return;
      }
      videoPreviews_.Add(other.videoPreviews_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            videoPreviews_.AddEntriesFrom(input, _repeated_videoPreviews_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A video preview (i.e. limited details about a video)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VideoPreview : pb::IMessage<VideoPreview> {
    private static readonly pb::MessageParser<VideoPreview> _parser = new pb::MessageParser<VideoPreview>(() => new VideoPreview());
    public static pb::MessageParser<VideoPreview> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VideoPreview() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VideoPreview(VideoPreview other) : this() {
      VideoId = other.videoId_ != null ? other.VideoId.Clone() : null;
      AddedDate = other.addedDate_ != null ? other.AddedDate.Clone() : null;
      name_ = other.name_;
      previewImageLocation_ = other.previewImageLocation_;
      UserId = other.userId_ != null ? other.UserId.Clone() : null;
    }

    public VideoPreview Clone() {
      return new VideoPreview(this);
    }

    /// <summary>Field number for the "video_id" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private global::KillrVideo.Common.Uuid videoId_;
    public global::KillrVideo.Common.Uuid VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "added_date" field.</summary>
    public const int AddedDateFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp addedDate_;
    public global::Google.Protobuf.WellKnownTypes.Timestamp AddedDate {
      get { return addedDate_; }
      set {
        addedDate_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "preview_image_location" field.</summary>
    public const int PreviewImageLocationFieldNumber = 4;
    private string previewImageLocation_ = "";
    public string PreviewImageLocation {
      get { return previewImageLocation_; }
      set {
        previewImageLocation_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 5;
    private global::KillrVideo.Common.Uuid userId_;
    public global::KillrVideo.Common.Uuid UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VideoPreview);
    }

    public bool Equals(VideoPreview other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VideoId, other.VideoId)) return false;
      if (!object.Equals(AddedDate, other.AddedDate)) return false;
      if (Name != other.Name) return false;
      if (PreviewImageLocation != other.PreviewImageLocation) return false;
      if (!object.Equals(UserId, other.UserId)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (videoId_ != null) hash ^= VideoId.GetHashCode();
      if (addedDate_ != null) hash ^= AddedDate.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PreviewImageLocation.Length != 0) hash ^= PreviewImageLocation.GetHashCode();
      if (userId_ != null) hash ^= UserId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (videoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoId);
      }
      if (addedDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AddedDate);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (PreviewImageLocation.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PreviewImageLocation);
      }
      if (userId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (videoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoId);
      }
      if (addedDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddedDate);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PreviewImageLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreviewImageLocation);
      }
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      return size;
    }

    public void MergeFrom(VideoPreview other) {
      if (other == null) {
        return;
      }
      if (other.videoId_ != null) {
        if (videoId_ == null) {
          videoId_ = new global::KillrVideo.Common.Uuid();
        }
        VideoId.MergeFrom(other.VideoId);
      }
      if (other.addedDate_ != null) {
        if (addedDate_ == null) {
          addedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AddedDate.MergeFrom(other.AddedDate);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PreviewImageLocation.Length != 0) {
        PreviewImageLocation = other.PreviewImageLocation;
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          userId_ = new global::KillrVideo.Common.Uuid();
        }
        UserId.MergeFrom(other.UserId);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videoId_ == null) {
              videoId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(videoId_);
            break;
          }
          case 18: {
            if (addedDate_ == null) {
              addedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(addedDate_);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            PreviewImageLocation = input.ReadString();
            break;
          }
          case 42: {
            if (userId_ == null) {
              userId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(userId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request for getting a page of the latest (i.e. newest) videos in the catalog
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetLatestVideoPreviewsRequest : pb::IMessage<GetLatestVideoPreviewsRequest> {
    private static readonly pb::MessageParser<GetLatestVideoPreviewsRequest> _parser = new pb::MessageParser<GetLatestVideoPreviewsRequest>(() => new GetLatestVideoPreviewsRequest());
    public static pb::MessageParser<GetLatestVideoPreviewsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetLatestVideoPreviewsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetLatestVideoPreviewsRequest(GetLatestVideoPreviewsRequest other) : this() {
      pageSize_ = other.pageSize_;
      pagingState_ = other.pagingState_;
    }

    public GetLatestVideoPreviewsRequest Clone() {
      return new GetLatestVideoPreviewsRequest(this);
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 1;
    private int pageSize_;
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "paging_state" field.</summary>
    public const int PagingStateFieldNumber = 16;
    private string pagingState_ = "";
    public string PagingState {
      get { return pagingState_; }
      set {
        pagingState_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetLatestVideoPreviewsRequest);
    }

    public bool Equals(GetLatestVideoPreviewsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageSize != other.PageSize) return false;
      if (PagingState != other.PagingState) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PagingState.Length != 0) hash ^= PagingState.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PageSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageSize);
      }
      if (PagingState.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(PagingState);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PagingState.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PagingState);
      }
      return size;
    }

    public void MergeFrom(GetLatestVideoPreviewsRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PagingState.Length != 0) {
        PagingState = other.PagingState;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageSize = input.ReadInt32();
            break;
          }
          case 130: {
            PagingState = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when getting a page of the latest videos in the catalog
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetLatestVideoPreviewsResponse : pb::IMessage<GetLatestVideoPreviewsResponse> {
    private static readonly pb::MessageParser<GetLatestVideoPreviewsResponse> _parser = new pb::MessageParser<GetLatestVideoPreviewsResponse>(() => new GetLatestVideoPreviewsResponse());
    public static pb::MessageParser<GetLatestVideoPreviewsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetLatestVideoPreviewsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetLatestVideoPreviewsResponse(GetLatestVideoPreviewsResponse other) : this() {
      videoPreviews_ = other.videoPreviews_.Clone();
      pagingState_ = other.pagingState_;
    }

    public GetLatestVideoPreviewsResponse Clone() {
      return new GetLatestVideoPreviewsResponse(this);
    }

    /// <summary>Field number for the "video_previews" field.</summary>
    public const int VideoPreviewsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::KillrVideo.VideoCatalog.VideoPreview> _repeated_videoPreviews_codec
        = pb::FieldCodec.ForMessage(10, global::KillrVideo.VideoCatalog.VideoPreview.Parser);
    private readonly pbc::RepeatedField<global::KillrVideo.VideoCatalog.VideoPreview> videoPreviews_ = new pbc::RepeatedField<global::KillrVideo.VideoCatalog.VideoPreview>();
    public pbc::RepeatedField<global::KillrVideo.VideoCatalog.VideoPreview> VideoPreviews {
      get { return videoPreviews_; }
    }

    /// <summary>Field number for the "paging_state" field.</summary>
    public const int PagingStateFieldNumber = 2;
    private string pagingState_ = "";
    public string PagingState {
      get { return pagingState_; }
      set {
        pagingState_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetLatestVideoPreviewsResponse);
    }

    public bool Equals(GetLatestVideoPreviewsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!videoPreviews_.Equals(other.videoPreviews_)) return false;
      if (PagingState != other.PagingState) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= videoPreviews_.GetHashCode();
      if (PagingState.Length != 0) hash ^= PagingState.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      videoPreviews_.WriteTo(output, _repeated_videoPreviews_codec);
      if (PagingState.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PagingState);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += videoPreviews_.CalculateSize(_repeated_videoPreviews_codec);
      if (PagingState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PagingState);
      }
      return size;
    }

    public void MergeFrom(GetLatestVideoPreviewsResponse other) {
      if (other == null) {
        return;
      }
      videoPreviews_.Add(other.videoPreviews_);
      if (other.PagingState.Length != 0) {
        PagingState = other.PagingState;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            videoPreviews_.AddEntriesFrom(input, _repeated_videoPreviews_codec);
            break;
          }
          case 18: {
            PagingState = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request for getting videos a particular user has added to the catalog
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetUserVideoPreviewsRequest : pb::IMessage<GetUserVideoPreviewsRequest> {
    private static readonly pb::MessageParser<GetUserVideoPreviewsRequest> _parser = new pb::MessageParser<GetUserVideoPreviewsRequest>(() => new GetUserVideoPreviewsRequest());
    public static pb::MessageParser<GetUserVideoPreviewsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetUserVideoPreviewsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetUserVideoPreviewsRequest(GetUserVideoPreviewsRequest other) : this() {
      UserId = other.userId_ != null ? other.UserId.Clone() : null;
      pageSize_ = other.pageSize_;
      pagingState_ = other.pagingState_;
    }

    public GetUserVideoPreviewsRequest Clone() {
      return new GetUserVideoPreviewsRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private global::KillrVideo.Common.Uuid userId_;
    public global::KillrVideo.Common.Uuid UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "paging_state" field.</summary>
    public const int PagingStateFieldNumber = 16;
    private string pagingState_ = "";
    public string PagingState {
      get { return pagingState_; }
      set {
        pagingState_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetUserVideoPreviewsRequest);
    }

    public bool Equals(GetUserVideoPreviewsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserId, other.UserId)) return false;
      if (PageSize != other.PageSize) return false;
      if (PagingState != other.PagingState) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (userId_ != null) hash ^= UserId.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PagingState.Length != 0) hash ^= PagingState.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserId);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PagingState.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(PagingState);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PagingState.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PagingState);
      }
      return size;
    }

    public void MergeFrom(GetUserVideoPreviewsRequest other) {
      if (other == null) {
        return;
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          userId_ = new global::KillrVideo.Common.Uuid();
        }
        UserId.MergeFrom(other.UserId);
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PagingState.Length != 0) {
        PagingState = other.PagingState;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userId_ == null) {
              userId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(userId_);
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 130: {
            PagingState = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when getting videos for a particular user
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetUserVideoPreviewsResponse : pb::IMessage<GetUserVideoPreviewsResponse> {
    private static readonly pb::MessageParser<GetUserVideoPreviewsResponse> _parser = new pb::MessageParser<GetUserVideoPreviewsResponse>(() => new GetUserVideoPreviewsResponse());
    public static pb::MessageParser<GetUserVideoPreviewsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.VideoCatalog.VideoCatalogServiceReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetUserVideoPreviewsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetUserVideoPreviewsResponse(GetUserVideoPreviewsResponse other) : this() {
      UserId = other.userId_ != null ? other.UserId.Clone() : null;
      videoPreviews_ = other.videoPreviews_.Clone();
      pagingState_ = other.pagingState_;
    }

    public GetUserVideoPreviewsResponse Clone() {
      return new GetUserVideoPreviewsResponse(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private global::KillrVideo.Common.Uuid userId_;
    public global::KillrVideo.Common.Uuid UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "video_previews" field.</summary>
    public const int VideoPreviewsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KillrVideo.VideoCatalog.VideoPreview> _repeated_videoPreviews_codec
        = pb::FieldCodec.ForMessage(18, global::KillrVideo.VideoCatalog.VideoPreview.Parser);
    private readonly pbc::RepeatedField<global::KillrVideo.VideoCatalog.VideoPreview> videoPreviews_ = new pbc::RepeatedField<global::KillrVideo.VideoCatalog.VideoPreview>();
    public pbc::RepeatedField<global::KillrVideo.VideoCatalog.VideoPreview> VideoPreviews {
      get { return videoPreviews_; }
    }

    /// <summary>Field number for the "paging_state" field.</summary>
    public const int PagingStateFieldNumber = 3;
    private string pagingState_ = "";
    public string PagingState {
      get { return pagingState_; }
      set {
        pagingState_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetUserVideoPreviewsResponse);
    }

    public bool Equals(GetUserVideoPreviewsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserId, other.UserId)) return false;
      if(!videoPreviews_.Equals(other.videoPreviews_)) return false;
      if (PagingState != other.PagingState) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (userId_ != null) hash ^= UserId.GetHashCode();
      hash ^= videoPreviews_.GetHashCode();
      if (PagingState.Length != 0) hash ^= PagingState.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserId);
      }
      videoPreviews_.WriteTo(output, _repeated_videoPreviews_codec);
      if (PagingState.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PagingState);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      size += videoPreviews_.CalculateSize(_repeated_videoPreviews_codec);
      if (PagingState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PagingState);
      }
      return size;
    }

    public void MergeFrom(GetUserVideoPreviewsResponse other) {
      if (other == null) {
        return;
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          userId_ = new global::KillrVideo.Common.Uuid();
        }
        UserId.MergeFrom(other.UserId);
      }
      videoPreviews_.Add(other.videoPreviews_);
      if (other.PagingState.Length != 0) {
        PagingState = other.PagingState;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userId_ == null) {
              userId_ = new global::KillrVideo.Common.Uuid();
            }
            input.ReadMessage(userId_);
            break;
          }
          case 18: {
            videoPreviews_.AddEntriesFrom(input, _repeated_videoPreviews_codec);
            break;
          }
          case 26: {
            PagingState = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
