// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user-management/user_management_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace KillrVideo.UserManagement {
  /// <summary>
  ///  The service responsible for managing user information
  /// </summary>
  public static class UserManagementService
  {
    static readonly string __ServiceName = "killrvideo.user_management.UserManagementService";

    static readonly Marshaller<global::KillrVideo.UserManagement.CreateUserRequest> __Marshaller_CreateUserRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.UserManagement.CreateUserRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.UserManagement.CreateUserResponse> __Marshaller_CreateUserResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.UserManagement.CreateUserResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.UserManagement.VerifyCredentialsRequest> __Marshaller_VerifyCredentialsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.UserManagement.VerifyCredentialsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.UserManagement.VerifyCredentialsResponse> __Marshaller_VerifyCredentialsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.UserManagement.VerifyCredentialsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.UserManagement.GetUserProfileRequest> __Marshaller_GetUserProfileRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.UserManagement.GetUserProfileRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.UserManagement.GetUserProfileResponse> __Marshaller_GetUserProfileResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.UserManagement.GetUserProfileResponse.Parser.ParseFrom);

    static readonly Method<global::KillrVideo.UserManagement.CreateUserRequest, global::KillrVideo.UserManagement.CreateUserResponse> __Method_CreateUser = new Method<global::KillrVideo.UserManagement.CreateUserRequest, global::KillrVideo.UserManagement.CreateUserResponse>(
        MethodType.Unary,
        __ServiceName,
        "CreateUser",
        __Marshaller_CreateUserRequest,
        __Marshaller_CreateUserResponse);

    static readonly Method<global::KillrVideo.UserManagement.VerifyCredentialsRequest, global::KillrVideo.UserManagement.VerifyCredentialsResponse> __Method_VerifyCredentials = new Method<global::KillrVideo.UserManagement.VerifyCredentialsRequest, global::KillrVideo.UserManagement.VerifyCredentialsResponse>(
        MethodType.Unary,
        __ServiceName,
        "VerifyCredentials",
        __Marshaller_VerifyCredentialsRequest,
        __Marshaller_VerifyCredentialsResponse);

    static readonly Method<global::KillrVideo.UserManagement.GetUserProfileRequest, global::KillrVideo.UserManagement.GetUserProfileResponse> __Method_GetUserProfile = new Method<global::KillrVideo.UserManagement.GetUserProfileRequest, global::KillrVideo.UserManagement.GetUserProfileResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetUserProfile",
        __Marshaller_GetUserProfileRequest,
        __Marshaller_GetUserProfileResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::KillrVideo.UserManagement.UserManagementServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for UserManagementService</summary>
    [System.Obsolete("Client side interfaced will be removed in the next release. Use client class directly.")]
    public interface IUserManagementServiceClient
    {
      /// <summary>
      ///  Creates a new user
      /// </summary>
      global::KillrVideo.UserManagement.CreateUserResponse CreateUser(global::KillrVideo.UserManagement.CreateUserRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Creates a new user
      /// </summary>
      global::KillrVideo.UserManagement.CreateUserResponse CreateUser(global::KillrVideo.UserManagement.CreateUserRequest request, CallOptions options);
      /// <summary>
      ///  Creates a new user
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.UserManagement.CreateUserResponse> CreateUserAsync(global::KillrVideo.UserManagement.CreateUserRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Creates a new user
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.UserManagement.CreateUserResponse> CreateUserAsync(global::KillrVideo.UserManagement.CreateUserRequest request, CallOptions options);
      /// <summary>
      ///  Verify a user's username and password
      /// </summary>
      global::KillrVideo.UserManagement.VerifyCredentialsResponse VerifyCredentials(global::KillrVideo.UserManagement.VerifyCredentialsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Verify a user's username and password
      /// </summary>
      global::KillrVideo.UserManagement.VerifyCredentialsResponse VerifyCredentials(global::KillrVideo.UserManagement.VerifyCredentialsRequest request, CallOptions options);
      /// <summary>
      ///  Verify a user's username and password
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.UserManagement.VerifyCredentialsResponse> VerifyCredentialsAsync(global::KillrVideo.UserManagement.VerifyCredentialsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Verify a user's username and password
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.UserManagement.VerifyCredentialsResponse> VerifyCredentialsAsync(global::KillrVideo.UserManagement.VerifyCredentialsRequest request, CallOptions options);
      /// <summary>
      ///  Gets a user or group of user's profiles
      /// </summary>
      global::KillrVideo.UserManagement.GetUserProfileResponse GetUserProfile(global::KillrVideo.UserManagement.GetUserProfileRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Gets a user or group of user's profiles
      /// </summary>
      global::KillrVideo.UserManagement.GetUserProfileResponse GetUserProfile(global::KillrVideo.UserManagement.GetUserProfileRequest request, CallOptions options);
      /// <summary>
      ///  Gets a user or group of user's profiles
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.UserManagement.GetUserProfileResponse> GetUserProfileAsync(global::KillrVideo.UserManagement.GetUserProfileRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Gets a user or group of user's profiles
      /// </summary>
      AsyncUnaryCall<global::KillrVideo.UserManagement.GetUserProfileResponse> GetUserProfileAsync(global::KillrVideo.UserManagement.GetUserProfileRequest request, CallOptions options);
    }

    /// <summary>Interface of server-side implementations of UserManagementService</summary>
    [System.Obsolete("Service implementations should inherit from the generated abstract base class instead.")]
    public interface IUserManagementService
    {
      /// <summary>
      ///  Creates a new user
      /// </summary>
      global::System.Threading.Tasks.Task<global::KillrVideo.UserManagement.CreateUserResponse> CreateUser(global::KillrVideo.UserManagement.CreateUserRequest request, ServerCallContext context);
      /// <summary>
      ///  Verify a user's username and password
      /// </summary>
      global::System.Threading.Tasks.Task<global::KillrVideo.UserManagement.VerifyCredentialsResponse> VerifyCredentials(global::KillrVideo.UserManagement.VerifyCredentialsRequest request, ServerCallContext context);
      /// <summary>
      ///  Gets a user or group of user's profiles
      /// </summary>
      global::System.Threading.Tasks.Task<global::KillrVideo.UserManagement.GetUserProfileResponse> GetUserProfile(global::KillrVideo.UserManagement.GetUserProfileRequest request, ServerCallContext context);
    }

    /// <summary>Base class for server-side implementations of UserManagementService</summary>
    public abstract class UserManagementServiceBase
    {
      /// <summary>
      ///  Creates a new user
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.UserManagement.CreateUserResponse> CreateUser(global::KillrVideo.UserManagement.CreateUserRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Verify a user's username and password
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.UserManagement.VerifyCredentialsResponse> VerifyCredentials(global::KillrVideo.UserManagement.VerifyCredentialsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets a user or group of user's profiles
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.UserManagement.GetUserProfileResponse> GetUserProfile(global::KillrVideo.UserManagement.GetUserProfileRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserManagementService</summary>
    #pragma warning disable 0618
    public class UserManagementServiceClient : ClientBase<UserManagementServiceClient>, IUserManagementServiceClient
    #pragma warning restore 0618
    {
      public UserManagementServiceClient(Channel channel) : base(channel)
      {
      }
      public UserManagementServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      ///<summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserManagementServiceClient() : base()
      {
      }
      ///<summary>Protected constructor to allow creation of configured clients.</summary>
      protected UserManagementServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Creates a new user
      /// </summary>
      public virtual global::KillrVideo.UserManagement.CreateUserResponse CreateUser(global::KillrVideo.UserManagement.CreateUserRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateUser(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new user
      /// </summary>
      public virtual global::KillrVideo.UserManagement.CreateUserResponse CreateUser(global::KillrVideo.UserManagement.CreateUserRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateUser, null, options, request);
      }
      /// <summary>
      ///  Creates a new user
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.UserManagement.CreateUserResponse> CreateUserAsync(global::KillrVideo.UserManagement.CreateUserRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateUserAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new user
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.UserManagement.CreateUserResponse> CreateUserAsync(global::KillrVideo.UserManagement.CreateUserRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateUser, null, options, request);
      }
      /// <summary>
      ///  Verify a user's username and password
      /// </summary>
      public virtual global::KillrVideo.UserManagement.VerifyCredentialsResponse VerifyCredentials(global::KillrVideo.UserManagement.VerifyCredentialsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyCredentials(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Verify a user's username and password
      /// </summary>
      public virtual global::KillrVideo.UserManagement.VerifyCredentialsResponse VerifyCredentials(global::KillrVideo.UserManagement.VerifyCredentialsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyCredentials, null, options, request);
      }
      /// <summary>
      ///  Verify a user's username and password
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.UserManagement.VerifyCredentialsResponse> VerifyCredentialsAsync(global::KillrVideo.UserManagement.VerifyCredentialsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyCredentialsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Verify a user's username and password
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.UserManagement.VerifyCredentialsResponse> VerifyCredentialsAsync(global::KillrVideo.UserManagement.VerifyCredentialsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyCredentials, null, options, request);
      }
      /// <summary>
      ///  Gets a user or group of user's profiles
      /// </summary>
      public virtual global::KillrVideo.UserManagement.GetUserProfileResponse GetUserProfile(global::KillrVideo.UserManagement.GetUserProfileRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetUserProfile(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets a user or group of user's profiles
      /// </summary>
      public virtual global::KillrVideo.UserManagement.GetUserProfileResponse GetUserProfile(global::KillrVideo.UserManagement.GetUserProfileRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserProfile, null, options, request);
      }
      /// <summary>
      ///  Gets a user or group of user's profiles
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.UserManagement.GetUserProfileResponse> GetUserProfileAsync(global::KillrVideo.UserManagement.GetUserProfileRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetUserProfileAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets a user or group of user's profiles
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.UserManagement.GetUserProfileResponse> GetUserProfileAsync(global::KillrVideo.UserManagement.GetUserProfileRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserProfile, null, options, request);
      }
      protected override UserManagementServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserManagementServiceClient(configuration);
      }
    }

    /// <summary>Creates a new client for UserManagementService</summary>
    public static UserManagementServiceClient NewClient(Channel channel)
    {
      return new UserManagementServiceClient(channel);
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(IUserManagementService serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_CreateUser, serviceImpl.CreateUser)
          .AddMethod(__Method_VerifyCredentials, serviceImpl.VerifyCredentials)
          .AddMethod(__Method_GetUserProfile, serviceImpl.GetUserProfile).Build();
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(UserManagementServiceBase serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_CreateUser, serviceImpl.CreateUser)
          .AddMethod(__Method_VerifyCredentials, serviceImpl.VerifyCredentials)
          .AddMethod(__Method_GetUserProfile, serviceImpl.GetUserProfile).Build();
    }

  }
}
#endregion
