// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ratings/ratings_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace KillrVideo.Ratings {
  public static class RatingsService
  {
    static readonly string __ServiceName = "killrvideo.ratings.RatingsService";

    static readonly Marshaller<global::KillrVideo.Ratings.RateVideoRequest> __Marshaller_RateVideoRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Ratings.RateVideoRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Ratings.RateVideoResponse> __Marshaller_RateVideoResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Ratings.RateVideoResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Ratings.GetRatingRequest> __Marshaller_GetRatingRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Ratings.GetRatingRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Ratings.GetRatingResponse> __Marshaller_GetRatingResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Ratings.GetRatingResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Ratings.GetUserRatingRequest> __Marshaller_GetUserRatingRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Ratings.GetUserRatingRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Ratings.GetUserRatingResponse> __Marshaller_GetUserRatingResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Ratings.GetUserRatingResponse.Parser.ParseFrom);

    static readonly Method<global::KillrVideo.Ratings.RateVideoRequest, global::KillrVideo.Ratings.RateVideoResponse> __Method_RateVideo = new Method<global::KillrVideo.Ratings.RateVideoRequest, global::KillrVideo.Ratings.RateVideoResponse>(
        MethodType.Unary,
        __ServiceName,
        "RateVideo",
        __Marshaller_RateVideoRequest,
        __Marshaller_RateVideoResponse);

    static readonly Method<global::KillrVideo.Ratings.GetRatingRequest, global::KillrVideo.Ratings.GetRatingResponse> __Method_GetRating = new Method<global::KillrVideo.Ratings.GetRatingRequest, global::KillrVideo.Ratings.GetRatingResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetRating",
        __Marshaller_GetRatingRequest,
        __Marshaller_GetRatingResponse);

    static readonly Method<global::KillrVideo.Ratings.GetUserRatingRequest, global::KillrVideo.Ratings.GetUserRatingResponse> __Method_GetUserRating = new Method<global::KillrVideo.Ratings.GetUserRatingRequest, global::KillrVideo.Ratings.GetUserRatingResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetUserRating",
        __Marshaller_GetUserRatingRequest,
        __Marshaller_GetUserRatingResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::KillrVideo.Ratings.RatingsServiceReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface IRatingsServiceClient
    {
      global::KillrVideo.Ratings.RateVideoResponse RateVideo(global::KillrVideo.Ratings.RateVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.Ratings.RateVideoResponse RateVideo(global::KillrVideo.Ratings.RateVideoRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.Ratings.RateVideoResponse> RateVideoAsync(global::KillrVideo.Ratings.RateVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.Ratings.RateVideoResponse> RateVideoAsync(global::KillrVideo.Ratings.RateVideoRequest request, CallOptions options);
      global::KillrVideo.Ratings.GetRatingResponse GetRating(global::KillrVideo.Ratings.GetRatingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.Ratings.GetRatingResponse GetRating(global::KillrVideo.Ratings.GetRatingRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.Ratings.GetRatingResponse> GetRatingAsync(global::KillrVideo.Ratings.GetRatingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.Ratings.GetRatingResponse> GetRatingAsync(global::KillrVideo.Ratings.GetRatingRequest request, CallOptions options);
      global::KillrVideo.Ratings.GetUserRatingResponse GetUserRating(global::KillrVideo.Ratings.GetUserRatingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::KillrVideo.Ratings.GetUserRatingResponse GetUserRating(global::KillrVideo.Ratings.GetUserRatingRequest request, CallOptions options);
      AsyncUnaryCall<global::KillrVideo.Ratings.GetUserRatingResponse> GetUserRatingAsync(global::KillrVideo.Ratings.GetUserRatingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::KillrVideo.Ratings.GetUserRatingResponse> GetUserRatingAsync(global::KillrVideo.Ratings.GetUserRatingRequest request, CallOptions options);
    }

    // server-side interface
    public interface IRatingsService
    {
      Task<global::KillrVideo.Ratings.RateVideoResponse> RateVideo(global::KillrVideo.Ratings.RateVideoRequest request, ServerCallContext context);
      Task<global::KillrVideo.Ratings.GetRatingResponse> GetRating(global::KillrVideo.Ratings.GetRatingRequest request, ServerCallContext context);
      Task<global::KillrVideo.Ratings.GetUserRatingResponse> GetUserRating(global::KillrVideo.Ratings.GetUserRatingRequest request, ServerCallContext context);
    }

    // client stub
    public class RatingsServiceClient : ClientBase, IRatingsServiceClient
    {
      public RatingsServiceClient(Channel channel) : base(channel)
      {
      }
      public global::KillrVideo.Ratings.RateVideoResponse RateVideo(global::KillrVideo.Ratings.RateVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RateVideo, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.Ratings.RateVideoResponse RateVideo(global::KillrVideo.Ratings.RateVideoRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_RateVideo, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Ratings.RateVideoResponse> RateVideoAsync(global::KillrVideo.Ratings.RateVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RateVideo, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Ratings.RateVideoResponse> RateVideoAsync(global::KillrVideo.Ratings.RateVideoRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_RateVideo, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::KillrVideo.Ratings.GetRatingResponse GetRating(global::KillrVideo.Ratings.GetRatingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetRating, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.Ratings.GetRatingResponse GetRating(global::KillrVideo.Ratings.GetRatingRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetRating, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Ratings.GetRatingResponse> GetRatingAsync(global::KillrVideo.Ratings.GetRatingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetRating, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Ratings.GetRatingResponse> GetRatingAsync(global::KillrVideo.Ratings.GetRatingRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetRating, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::KillrVideo.Ratings.GetUserRatingResponse GetUserRating(global::KillrVideo.Ratings.GetUserRatingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetUserRating, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::KillrVideo.Ratings.GetUserRatingResponse GetUserRating(global::KillrVideo.Ratings.GetUserRatingRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetUserRating, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Ratings.GetUserRatingResponse> GetUserRatingAsync(global::KillrVideo.Ratings.GetUserRatingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetUserRating, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::KillrVideo.Ratings.GetUserRatingResponse> GetUserRatingAsync(global::KillrVideo.Ratings.GetUserRatingRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetUserRating, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IRatingsService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_RateVideo, serviceImpl.RateVideo)
          .AddMethod(__Method_GetRating, serviceImpl.GetRating)
          .AddMethod(__Method_GetUserRating, serviceImpl.GetUserRating).Build();
    }

    // creates a new client
    public static RatingsServiceClient NewClient(Channel channel)
    {
      return new RatingsServiceClient(channel);
    }

  }
}
#endregion
